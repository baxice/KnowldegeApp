2025-06-03 12:42:16.012 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-03 12:42:16.039 [main] INFO  com.knowledge.KnowledgeBaseApplication - Starting KnowledgeBaseApplication using Java 21.0.4 with PID 9920 (D:\KnowledgeApp\backend\target\classes started by 25565 in D:\KnowledgeApp\backend)
2025-06-03 12:42:16.040 [main] DEBUG com.knowledge.KnowledgeBaseApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-03 12:42:16.040 [main] INFO  com.knowledge.KnowledgeBaseApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-03 12:42:16.570 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-03 12:42:16.628 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 36 ms. Found 4 JPA repository interfaces.
2025-06-03 12:42:17.065 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-03 12:42:17.073 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-03 12:42:17.074 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-03 12:42:17.075 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-03 12:42:17.123 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-03 12:42:17.124 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1053 ms
2025-06-03 12:42:17.211 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-03 12:42:17.242 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-03 12:42:17.261 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-03 12:42:17.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@2326180c
2025-06-03 12:42:17.303 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@2326180c
2025-06-03 12:42:17.303 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@2326180c
2025-06-03 12:42:17.303 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@68e47e7
2025-06-03 12:42:17.303 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@68e47e7
2025-06-03 12:42:17.303 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@1c00d406
2025-06-03 12:42:17.303 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@1c00d406
2025-06-03 12:42:17.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@16ac4d3d
2025-06-03 12:42:17.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@16ac4d3d
2025-06-03 12:42:17.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@559d19c
2025-06-03 12:42:17.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@559d19c
2025-06-03 12:42:17.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@559d19c
2025-06-03 12:42:17.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@719c1faf
2025-06-03 12:42:17.305 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@719c1faf
2025-06-03 12:42:17.305 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@719c1faf
2025-06-03 12:42:17.305 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@6ba6557e
2025-06-03 12:42:17.305 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@6ba6557e
2025-06-03 12:42:17.306 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@1f172892
2025-06-03 12:42:17.306 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@5409dfdd
2025-06-03 12:42:17.306 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@5409dfdd
2025-06-03 12:42:17.306 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@45f9d394
2025-06-03 12:42:17.306 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@1c2d63f0
2025-06-03 12:42:17.306 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@3a588b5f
2025-06-03 12:42:17.306 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@3a588b5f
2025-06-03 12:42:17.306 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@3a588b5f
2025-06-03 12:42:17.307 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@20b54cfe
2025-06-03 12:42:17.307 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@20b54cfe
2025-06-03 12:42:17.307 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@20b54cfe
2025-06-03 12:42:17.307 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@2bdb5e0f
2025-06-03 12:42:17.307 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@2bdb5e0f
2025-06-03 12:42:17.307 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@2bdb5e0f
2025-06-03 12:42:17.307 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@5c9e8a67
2025-06-03 12:42:17.308 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@5c9e8a67
2025-06-03 12:42:17.308 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@5c9e8a67
2025-06-03 12:42:17.308 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@2262f0d8
2025-06-03 12:42:17.308 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@2262f0d8
2025-06-03 12:42:17.308 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@2262f0d8
2025-06-03 12:42:17.308 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@283a8ad6
2025-06-03 12:42:17.309 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@283a8ad6
2025-06-03 12:42:17.309 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@59e082f8
2025-06-03 12:42:17.309 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@59e082f8
2025-06-03 12:42:17.309 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@7185e611
2025-06-03 12:42:17.309 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@7185e611
2025-06-03 12:42:17.309 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@7185e611
2025-06-03 12:42:17.310 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@44d43cc9
2025-06-03 12:42:17.310 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@384472bf
2025-06-03 12:42:17.310 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@384472bf
2025-06-03 12:42:17.311 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@656ec00d
2025-06-03 12:42:17.311 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@3b8507df
2025-06-03 12:42:17.311 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@3b8507df
2025-06-03 12:42:17.311 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@3b8507df
2025-06-03 12:42:17.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@5ed25612
2025-06-03 12:42:17.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@451816fd
2025-06-03 12:42:17.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@56e5c8fb
2025-06-03 12:42:17.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@45cd8607
2025-06-03 12:42:17.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@45cd8607
2025-06-03 12:42:17.313 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@9e33a6a
2025-06-03 12:42:17.313 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@9e33a6a
2025-06-03 12:42:17.313 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@c497a55
2025-06-03 12:42:17.313 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@7493d937
2025-06-03 12:42:17.313 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@5dc7841c
2025-06-03 12:42:17.314 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@4d67d5a4
2025-06-03 12:42:17.314 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@a3b858f
2025-06-03 12:42:17.314 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@600bbf9e
2025-06-03 12:42:17.314 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@18d30e7
2025-06-03 12:42:17.315 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@18d30e7
2025-06-03 12:42:17.315 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@72b40f87
2025-06-03 12:42:17.315 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@72b40f87
2025-06-03 12:42:17.315 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@2475fba3
2025-06-03 12:42:17.315 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@2475fba3
2025-06-03 12:42:17.315 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@19bf47fc
2025-06-03 12:42:17.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@19bf47fc
2025-06-03 12:42:17.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@71dd4624
2025-06-03 12:42:17.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@71dd4624
2025-06-03 12:42:17.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@2347b7af
2025-06-03 12:42:17.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@2864f887
2025-06-03 12:42:17.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@4b07cad0
2025-06-03 12:42:17.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@4b07cad0
2025-06-03 12:42:17.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@507049f2
2025-06-03 12:42:17.317 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4e94669c
2025-06-03 12:42:17.317 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@41bb1f09
2025-06-03 12:42:17.317 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@349f0ca4
2025-06-03 12:42:17.317 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@349f0ca4
2025-06-03 12:42:17.318 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@66f2ec1c
2025-06-03 12:42:17.318 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@b3fc6d8
2025-06-03 12:42:17.318 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@12e5d3e1
2025-06-03 12:42:17.318 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@12e5d3e1
2025-06-03 12:42:17.319 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@5ed31735
2025-06-03 12:42:17.319 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@5ed31735
2025-06-03 12:42:17.319 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@2fb082ff
2025-06-03 12:42:17.320 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@2fb082ff
2025-06-03 12:42:17.320 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@2fb082ff
2025-06-03 12:42:17.320 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@5a4c98d7
2025-06-03 12:42:17.320 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@5a4c98d7
2025-06-03 12:42:17.320 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@5a4c98d7
2025-06-03 12:42:17.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@668a32a4
2025-06-03 12:42:17.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@2026fbff
2025-06-03 12:42:17.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@baa227e
2025-06-03 12:42:17.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@baa227e
2025-06-03 12:42:17.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@351e89fc
2025-06-03 12:42:17.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@351e89fc
2025-06-03 12:42:17.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@351e89fc
2025-06-03 12:42:17.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@2b682e9
2025-06-03 12:42:17.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@15586843
2025-06-03 12:42:17.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@4fbb1144
2025-06-03 12:42:17.323 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@4fbb1144
2025-06-03 12:42:17.323 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@e2b3026
2025-06-03 12:42:17.323 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@e2b3026
2025-06-03 12:42:17.323 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@e2b3026
2025-06-03 12:42:17.323 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@38bc5ac0
2025-06-03 12:42:17.324 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@38bc5ac0
2025-06-03 12:42:17.324 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@6ef037e4
2025-06-03 12:42:17.325 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@6ef037e4
2025-06-03 12:42:17.325 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@79d63a4f
2025-06-03 12:42:17.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@79d63a4f
2025-06-03 12:42:17.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@2e2b9f53
2025-06-03 12:42:17.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@2e2b9f53
2025-06-03 12:42:17.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@749baa0c
2025-06-03 12:42:17.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@749baa0c
2025-06-03 12:42:17.327 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration vector -> org.hibernate.type.BasicTypeReference@1b3bec6c
2025-06-03 12:42:17.327 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@53f7a906
2025-06-03 12:42:17.330 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@6598caab
2025-06-03 12:42:17.330 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@6598caab
2025-06-03 12:42:17.331 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@44fb6ebd
2025-06-03 12:42:17.331 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@5cdf221a
2025-06-03 12:42:17.331 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@7e27f603
2025-06-03 12:42:17.331 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@6136e1fc
2025-06-03 12:42:17.331 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@1736c1e4
2025-06-03 12:42:17.332 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@32dcfeea
2025-06-03 12:42:17.332 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@738a815c
2025-06-03 12:42:17.332 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@2565a7d0
2025-06-03 12:42:17.332 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@4fd7b79
2025-06-03 12:42:17.418 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-03 12:42:17.434 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-03 12:42:17.569 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@75bf9e67
2025-06-03 12:42:17.571 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-03 12:42:17.605 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-03 12:42:17.620 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5a2035e1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4df7b4ac)
2025-06-03 12:42:17.620 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c47e077) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@41bd6a0f)
2025-06-03 12:42:17.621 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1ae9d0e4) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6acb45c1)
2025-06-03 12:42:17.621 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@294c44b7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@30bbe83)
2025-06-03 12:42:17.621 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@57b130f6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@67e4928c)
2025-06-03 12:42:17.621 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2cc61b3b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@72e75786)
2025-06-03 12:42:17.621 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2c0fefac) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6fbc7853)
2025-06-03 12:42:17.621 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@733fa95c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3b2c8bda)
2025-06-03 12:42:17.621 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@688d619c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@647ff23e)
2025-06-03 12:42:17.622 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-03 12:42:17.623 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-03 12:42:17.623 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-03 12:42:17.624 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-03 12:42:17.624 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-03 12:42:17.626 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@2a99fa07
2025-06-03 12:42:17.626 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@44fb6ebd`
2025-06-03 12:42:17.628 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.DurationType -> basicType@1(java.time.Duration,3015)
2025-06-03 12:42:17.629 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,3015)
2025-06-03 12:42:17.629 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,3015)
2025-06-03 12:42:17.631 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-03 12:42:17.631 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-03 12:42:17.631 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-03 12:42:17.631 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-03 12:42:17.631 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-03 12:42:17.632 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-03 12:42:17.632 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-03 12:42:17.632 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-03 12:42:17.632 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-03 12:42:17.634 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1592e540] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@3e2772a9]
2025-06-03 12:42:18.234 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-03 12:42:18.234 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1592e540] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@63ede2a0]
2025-06-03 12:42:18.316 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@63ede2a0] for TypeConfiguration
2025-06-03 12:42:18.316 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 12:42:18.520 [main] ERROR o.s.boot.web.embedded.tomcat.TomcatStarter - Error starting Tomcat context. Exception: org.springframework.beans.factory.UnsatisfiedDependencyException. Message: Error creating bean with name 'jwtAuthenticationFilter': Unsatisfied dependency expressed through field 'jwtUtil': Error creating bean with name 'jwtUtil' defined in file [D:\KnowledgeApp\backend\target\classes\com\knowledge\util\JwtUtil.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'userServiceImpl': Unsatisfied dependency expressed through field 'passwordEncoder': Error creating bean with name 'webSecurityConfig': Unsatisfied dependency expressed through field 'jwtAuthenticationFilter': Error creating bean with name 'jwtAuthenticationFilter': Requested bean is currently in creation: Is there an unresolvable circular reference?
2025-06-03 12:42:18.537 [main] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-03 12:42:18.539 [main] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [HikariPool-1 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base/jdk.internal.misc.Unsafe.park(Native Method)
 java.base/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:269)
 java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1758)
 java.base/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1070)
 java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
 java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
 java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-03 12:42:18.539 [main] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [HikariPool-1 connection adder] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base/jdk.internal.misc.Unsafe.park(Native Method)
 java.base/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:269)
 java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1758)
 java.base/java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:460)
 java.base/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1069)
 java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
 java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
 java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-03 12:42:18.542 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Unable to start web server
2025-06-03 12:42:18.542 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 12:42:18.543 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@63ede2a0] for TypeConfiguration
2025-06-03 12:42:18.543 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@51d41b97] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@63ede2a0]
2025-06-03 12:42:18.544 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-03 12:42:18.550 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-03 12:42:18.556 [main] INFO  o.s.b.a.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-03 12:42:18.568 [main] ERROR o.s.b.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

The dependencies of some of the beans in the application context form a cycle:

┌─────┐
|  jwtAuthenticationFilter (field private com.knowledge.util.JwtUtil com.knowledge.config.JwtAuthenticationFilter.jwtUtil)
↑     ↓
|  jwtUtil defined in file [D:\KnowledgeApp\backend\target\classes\com\knowledge\util\JwtUtil.class]
↑     ↓
|  userServiceImpl (field private org.springframework.security.crypto.password.PasswordEncoder com.knowledge.service.UserServiceImpl.passwordEncoder)
↑     ↓
|  webSecurityConfig (field private com.knowledge.config.JwtAuthenticationFilter com.knowledge.config.WebSecurityConfig.jwtAuthenticationFilter)
└─────┘


Action:

Relying upon circular references is discouraged and they are prohibited by default. Update your application to remove the dependency cycle between beans. As a last resort, it may be possible to break the cycle automatically by setting spring.main.allow-circular-references to true.

2025-06-03 12:48:51.607 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-03 12:48:51.636 [main] INFO  com.knowledge.KnowledgeBaseApplication - Starting KnowledgeBaseApplication using Java 21.0.4 with PID 18756 (D:\KnowledgeApp\backend\target\classes started by 25565 in D:\KnowledgeApp\backend)
2025-06-03 12:48:51.637 [main] DEBUG com.knowledge.KnowledgeBaseApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-03 12:48:51.638 [main] INFO  com.knowledge.KnowledgeBaseApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-03 12:48:52.202 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-03 12:48:52.245 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 37 ms. Found 4 JPA repository interfaces.
2025-06-03 12:48:52.739 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-03 12:48:52.746 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-03 12:48:52.747 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-03 12:48:52.748 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-03 12:48:52.797 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-03 12:48:52.797 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1128 ms
2025-06-03 12:48:52.891 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-03 12:48:52.938 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-03 12:48:52.963 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-03 12:48:53.107 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-03 12:48:53.125 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-03 12:48:53.245 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5c41b8d8
2025-06-03 12:48:53.247 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-03 12:48:53.284 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-03 12:48:53.995 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-03 12:48:54.074 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 12:48:54.316 [main] ERROR o.s.boot.web.embedded.tomcat.TomcatStarter - Error starting Tomcat context. Exception: org.springframework.beans.factory.UnsatisfiedDependencyException. Message: Error creating bean with name 'jwtAuthenticationFilter': Unsatisfied dependency expressed through field 'jwtUtil': Error creating bean with name 'jwtUtil' defined in file [D:\KnowledgeApp\backend\target\classes\com\knowledge\util\JwtUtil.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'userServiceImpl': Unsatisfied dependency expressed through field 'passwordEncoder': Error creating bean with name 'webSecurityConfig': Unsatisfied dependency expressed through field 'jwtAuthenticationFilter': Error creating bean with name 'jwtAuthenticationFilter': Requested bean is currently in creation: Is there an unresolvable circular reference?
2025-06-03 12:48:54.337 [main] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-03 12:48:54.339 [main] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [HikariPool-1 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base/jdk.internal.misc.Unsafe.park(Native Method)
 java.base/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:269)
 java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1758)
 java.base/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1070)
 java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
 java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
 java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-03 12:48:54.339 [main] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [HikariPool-1 connection adder] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base/jdk.internal.misc.Unsafe.park(Native Method)
 java.base/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:269)
 java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1758)
 java.base/java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:460)
 java.base/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1069)
 java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
 java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
 java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-03 12:48:54.341 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Unable to start web server
2025-06-03 12:48:54.341 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 12:48:54.343 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-03 12:48:54.349 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-03 12:48:54.355 [main] INFO  o.s.b.a.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-03 12:48:54.367 [main] ERROR o.s.b.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

The dependencies of some of the beans in the application context form a cycle:

┌─────┐
|  jwtAuthenticationFilter (field private com.knowledge.util.JwtUtil com.knowledge.config.JwtAuthenticationFilter.jwtUtil)
↑     ↓
|  jwtUtil defined in file [D:\KnowledgeApp\backend\target\classes\com\knowledge\util\JwtUtil.class]
↑     ↓
|  userServiceImpl (field private org.springframework.security.crypto.password.PasswordEncoder com.knowledge.service.UserServiceImpl.passwordEncoder)
↑     ↓
|  webSecurityConfig (field private com.knowledge.config.JwtAuthenticationFilter com.knowledge.config.WebSecurityConfig.jwtAuthenticationFilter)
└─────┘


Action:

Relying upon circular references is discouraged and they are prohibited by default. Update your application to remove the dependency cycle between beans. As a last resort, it may be possible to break the cycle automatically by setting spring.main.allow-circular-references to true.

2025-06-03 13:37:37.997 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-03 13:37:38.026 [main] INFO  com.knowledge.KnowledgeBaseApplication - Starting KnowledgeBaseApplication using Java 21.0.4 with PID 16364 (D:\KnowledgeApp\backend\target\classes started by 25565 in D:\KnowledgeApp\backend)
2025-06-03 13:37:38.026 [main] DEBUG com.knowledge.KnowledgeBaseApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-03 13:37:38.027 [main] INFO  com.knowledge.KnowledgeBaseApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-03 13:37:38.565 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-03 13:37:38.604 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 34 ms. Found 4 JPA repository interfaces.
2025-06-03 13:37:39.071 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-03 13:37:39.078 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-03 13:37:39.080 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-03 13:37:39.081 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-03 13:37:39.202 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-03 13:37:39.203 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1145 ms
2025-06-03 13:37:39.296 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-03 13:37:39.334 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-03 13:37:39.354 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-03 13:37:39.482 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-03 13:37:39.496 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-03 13:37:39.673 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@77ea960f
2025-06-03 13:37:39.674 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-03 13:37:39.717 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-03 13:37:40.329 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-03 13:37:40.437 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 13:37:40.642 [main] ERROR o.s.boot.web.embedded.tomcat.TomcatStarter - Error starting Tomcat context. Exception: org.springframework.beans.factory.UnsatisfiedDependencyException. Message: Error creating bean with name 'jwtAuthenticationFilter': Unsatisfied dependency expressed through field 'jwtUtil': Error creating bean with name 'jwtUtil' defined in file [D:\KnowledgeApp\backend\target\classes\com\knowledge\util\JwtUtil.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'userServiceImpl': Unsatisfied dependency expressed through field 'passwordEncoder': Error creating bean with name 'webSecurityConfig': Unsatisfied dependency expressed through field 'jwtAuthenticationFilter': Error creating bean with name 'jwtAuthenticationFilter': Requested bean is currently in creation: Is there an unresolvable circular reference?
2025-06-03 13:37:40.660 [main] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-06-03 13:37:40.661 [main] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [HikariPool-1 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base/jdk.internal.misc.Unsafe.park(Native Method)
 java.base/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:269)
 java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1758)
 java.base/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1070)
 java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
 java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
 java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-03 13:37:40.662 [main] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [HikariPool-1 connection adder] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base/jdk.internal.misc.Unsafe.park(Native Method)
 java.base/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:269)
 java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1758)
 java.base/java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:460)
 java.base/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1069)
 java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
 java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
 java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-03 13:37:40.664 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Unable to start web server
2025-06-03 13:37:40.664 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 13:37:40.665 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-03 13:37:40.672 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-03 13:37:40.678 [main] INFO  o.s.b.a.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-03 13:37:40.688 [main] ERROR o.s.b.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

The dependencies of some of the beans in the application context form a cycle:

┌─────┐
|  jwtAuthenticationFilter (field private com.knowledge.util.JwtUtil com.knowledge.config.JwtAuthenticationFilter.jwtUtil)
↑     ↓
|  jwtUtil defined in file [D:\KnowledgeApp\backend\target\classes\com\knowledge\util\JwtUtil.class]
↑     ↓
|  userServiceImpl (field private org.springframework.security.crypto.password.PasswordEncoder com.knowledge.service.UserServiceImpl.passwordEncoder)
↑     ↓
|  webSecurityConfig (field private com.knowledge.config.JwtAuthenticationFilter com.knowledge.config.WebSecurityConfig.jwtAuthenticationFilter)
└─────┘


Action:

Relying upon circular references is discouraged and they are prohibited by default. Update your application to remove the dependency cycle between beans. As a last resort, it may be possible to break the cycle automatically by setting spring.main.allow-circular-references to true.

2025-06-03 13:41:27.366 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-03 13:41:27.393 [main] INFO  com.knowledge.KnowledgeBaseApplication - Starting KnowledgeBaseApplication using Java 21.0.4 with PID 19756 (D:\KnowledgeApp\backend\target\classes started by 25565 in D:\KnowledgeApp\backend)
2025-06-03 13:41:27.394 [main] DEBUG com.knowledge.KnowledgeBaseApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-03 13:41:27.394 [main] INFO  com.knowledge.KnowledgeBaseApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-03 13:41:27.935 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-03 13:41:27.978 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 37 ms. Found 4 JPA repository interfaces.
2025-06-03 13:41:28.459 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-03 13:41:28.468 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-03 13:41:28.469 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-03 13:41:28.470 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-03 13:41:28.517 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-03 13:41:28.518 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1094 ms
2025-06-03 13:41:28.619 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-03 13:41:28.661 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-03 13:41:28.684 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-03 13:41:28.825 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-03 13:41:28.843 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-03 13:41:28.958 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@24f177f5
2025-06-03 13:41:28.961 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-03 13:41:28.997 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-03 13:41:29.675 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-03 13:41:29.759 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 13:41:30.008 [main] DEBUG com.knowledge.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-03 13:41:30.114 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-03 13:41:30.671 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-03 13:41:30.863 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@12f52ca4, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@16b48082, org.springframework.security.web.context.SecurityContextHolderFilter@631ff7a2, org.springframework.security.web.header.HeaderWriterFilter@1a48e48e, org.springframework.web.filter.CorsFilter@5bf41334, org.springframework.security.web.authentication.logout.LogoutFilter@c8dc1ef, com.knowledge.config.JwtAuthenticationFilter@62536882, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3a837f7, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@13ea9afc, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4e216b7e, org.springframework.security.web.session.SessionManagementFilter@12b4a53d, org.springframework.security.web.access.ExceptionTranslationFilter@23faae85, org.springframework.security.web.access.intercept.AuthorizationFilter@1a6aecec]
2025-06-03 13:41:31.107 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-03 13:41:31.121 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-03 13:41:31.128 [main] INFO  com.knowledge.KnowledgeBaseApplication - Started KnowledgeBaseApplication in 4.11 seconds (process running for 4.358)
2025-06-03 13:42:15.721 [http-nio-8080-exec-2] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-03 13:42:15.721 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-03 13:42:15.722 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-03 13:52:34.819 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-03 13:52:34.848 [main] INFO  com.knowledge.KnowledgeBaseApplication - Starting KnowledgeBaseApplication using Java 21.0.4 with PID 16764 (D:\KnowledgeApp\backend\target\classes started by 25565 in D:\KnowledgeApp\backend)
2025-06-03 13:52:34.849 [main] DEBUG com.knowledge.KnowledgeBaseApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-03 13:52:34.849 [main] INFO  com.knowledge.KnowledgeBaseApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-03 13:52:35.406 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-03 13:52:35.448 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 36 ms. Found 4 JPA repository interfaces.
2025-06-03 13:52:35.932 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-03 13:52:35.940 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-03 13:52:35.942 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-03 13:52:35.943 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-03 13:52:35.994 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-03 13:52:35.994 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1114 ms
2025-06-03 13:52:36.092 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-03 13:52:36.137 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-03 13:52:36.159 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-03 13:52:36.297 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-03 13:52:36.315 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-03 13:52:36.436 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@22361e23
2025-06-03 13:52:36.438 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-03 13:52:36.477 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-03 13:52:37.156 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-03 13:52:37.248 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 13:52:37.512 [main] DEBUG com.knowledge.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-03 13:52:37.618 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-03 13:52:38.164 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-03 13:52:38.337 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5af535ff, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@161138c8, org.springframework.security.web.context.SecurityContextHolderFilter@207b0d48, org.springframework.security.web.header.HeaderWriterFilter@1184b542, org.springframework.web.filter.CorsFilter@60c3f653, org.springframework.security.web.authentication.logout.LogoutFilter@1ac65143, com.knowledge.config.JwtAuthenticationFilter@7bf997e0, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3518882c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@71dc03a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7075ef91, org.springframework.security.web.session.SessionManagementFilter@3094111c, org.springframework.security.web.access.ExceptionTranslationFilter@91e76b6, org.springframework.security.web.access.intercept.AuthorizationFilter@79a1f0a1]
2025-06-03 13:52:38.545 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-03 13:52:38.558 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-03 13:52:38.564 [main] INFO  com.knowledge.KnowledgeBaseApplication - Started KnowledgeBaseApplication in 4.1 seconds (process running for 4.359)
2025-06-03 13:52:53.091 [http-nio-8080-exec-3] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-03 13:52:53.092 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-03 13:52:53.093 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-03 14:02:08.431 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-03 14:02:08.459 [main] INFO  com.knowledge.KnowledgeBaseApplication - Starting KnowledgeBaseApplication using Java 21.0.4 with PID 14020 (D:\KnowledgeApp\backend\target\classes started by 25565 in D:\KnowledgeApp\backend)
2025-06-03 14:02:08.460 [main] DEBUG com.knowledge.KnowledgeBaseApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-03 14:02:08.460 [main] INFO  com.knowledge.KnowledgeBaseApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-03 14:02:08.991 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-03 14:02:09.034 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 37 ms. Found 4 JPA repository interfaces.
2025-06-03 14:02:09.492 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-03 14:02:09.499 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-03 14:02:09.502 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-03 14:02:09.502 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-03 14:02:09.554 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-03 14:02:09.554 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1063 ms
2025-06-03 14:02:09.651 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-03 14:02:09.693 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-03 14:02:09.714 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-03 14:02:09.844 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-03 14:02:09.861 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-03 14:02:09.974 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6f4d2294
2025-06-03 14:02:09.975 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-03 14:02:10.017 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-03 14:02:10.634 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-03 14:02:10.728 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 14:02:10.992 [main] DEBUG com.knowledge.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-03 14:02:11.102 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-03 14:02:11.645 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-03 14:02:11.810 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@639ad5d9, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3ccca75c, org.springframework.security.web.context.SecurityContextHolderFilter@181cafd, org.springframework.security.web.header.HeaderWriterFilter@631ff7a2, org.springframework.web.filter.CorsFilter@5cc5d766, org.springframework.security.web.authentication.logout.LogoutFilter@1a6aecec, com.knowledge.config.JwtAuthenticationFilter@7bf997e0, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@33bd3549, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@806a687, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@66a0fae1, org.springframework.security.web.session.SessionManagementFilter@71dc03a, org.springframework.security.web.access.ExceptionTranslationFilter@12b4a53d, org.springframework.security.web.access.intercept.AuthorizationFilter@35c66ad]
2025-06-03 14:02:12.022 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-03 14:02:12.047 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-03 14:02:12.054 [main] INFO  com.knowledge.KnowledgeBaseApplication - Started KnowledgeBaseApplication in 3.953 seconds (process running for 4.198)
2025-06-03 14:02:14.808 [http-nio-8080-exec-4] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-03 14:02:14.809 [http-nio-8080-exec-4] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-03 14:02:14.810 [http-nio-8080-exec-4] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-03 14:02:32.011 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-06-03 14:02:32.030 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
2025-06-03 14:02:32.149 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (created_at, email, password, username) 
    values
        (?, ?, ?, ?)
2025-06-03 14:02:32.180 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 用户注册 - 147ms
2025-06-03 14:02:32.182 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 用户认证 - 用户注册 - 225ms
2025-06-03 14:02:46.779 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:02:46.863 [http-nio-8080-exec-8] ERROR com.knowledge.aspect.LogAspect - ✗ 用户认证 - 用户登录 - 185ms - Bad credentials
2025-06-03 14:05:34.052 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-03 14:05:34.081 [main] INFO  com.knowledge.KnowledgeBaseApplication - Starting KnowledgeBaseApplication using Java 21.0.4 with PID 4076 (D:\KnowledgeApp\backend\target\classes started by 25565 in D:\KnowledgeApp\backend)
2025-06-03 14:05:34.082 [main] DEBUG com.knowledge.KnowledgeBaseApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-03 14:05:34.082 [main] INFO  com.knowledge.KnowledgeBaseApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-03 14:05:34.617 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-03 14:05:34.656 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 35 ms. Found 4 JPA repository interfaces.
2025-06-03 14:05:35.141 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-03 14:05:35.148 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-03 14:05:35.150 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-03 14:05:35.151 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-03 14:05:35.199 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-03 14:05:35.200 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1086 ms
2025-06-03 14:05:35.292 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-03 14:05:35.337 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-03 14:05:35.357 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-03 14:05:35.495 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-03 14:05:35.512 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-03 14:05:35.627 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@65e05005
2025-06-03 14:05:35.629 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-03 14:05:35.670 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-03 14:05:36.315 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-03 14:05:36.397 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 14:05:36.648 [main] DEBUG com.knowledge.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-03 14:05:36.749 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-03 14:05:37.288 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-03 14:05:37.459 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4e216b7e, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@750afe12, org.springframework.security.web.context.SecurityContextHolderFilter@13ea9afc, org.springframework.security.web.header.HeaderWriterFilter@cea6297, org.springframework.web.filter.CorsFilter@4788c0a1, org.springframework.security.web.authentication.logout.LogoutFilter@a9339e5, com.knowledge.config.JwtAuthenticationFilter@27f4761b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7241872c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3094111c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3c9e06d7, org.springframework.security.web.session.SessionManagementFilter@631ff7a2, org.springframework.security.web.access.ExceptionTranslationFilter@1a48e48e, org.springframework.security.web.access.intercept.AuthorizationFilter@16b48082]
2025-06-03 14:05:37.678 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-03 14:05:37.694 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-03 14:05:37.699 [main] INFO  com.knowledge.KnowledgeBaseApplication - Started KnowledgeBaseApplication in 3.992 seconds (process running for 4.243)
2025-06-03 14:06:09.749 [http-nio-8080-exec-3] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-03 14:06:09.750 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-03 14:06:09.751 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-03 14:06:09.884 [http-nio-8080-exec-1] DEBUG com.knowledge.controller.AuthController - 尝试登录用户: 2250238116@qq.com
2025-06-03 14:06:09.937 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-06-03 14:06:09.945 [http-nio-8080-exec-1] WARN  com.knowledge.controller.AuthController - 用户不存在: 2250238116@qq.com
2025-06-03 14:06:09.946 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 用户认证 - 用户登录 - 62ms
2025-06-03 14:06:20.367 [http-nio-8080-exec-4] DEBUG com.knowledge.controller.AuthController - 尝试登录用户: root
2025-06-03 14:06:20.369 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-06-03 14:06:20.376 [http-nio-8080-exec-4] DEBUG com.knowledge.controller.AuthController - 用户存在，开始认证...
2025-06-03 14:06:20.472 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:06:20.481 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:06:20.490 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:06:20.491 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:06:20.574 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:06:20.584 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 11ms
2025-06-03 14:06:20.601 [http-nio-8080-exec-4] INFO  com.knowledge.controller.AuthController - 用户登录成功: root
2025-06-03 14:06:20.602 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 用户认证 - 用户登录 - 235ms
2025-06-03 14:06:20.678 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:06:20.679 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:06:20.679 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:06:20.679 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:06:20.680 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:06:20.680 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:06:20.680 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:06:20.680 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:06:20.683 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:06:20.683 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:06:20.683 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:06:20.683 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:06:20.683 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:06:20.683 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:06:20.683 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:06:20.684 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:06:20.688 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:06:20.691 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 14:06:20.714 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 27ms
2025-06-03 14:06:20.718 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:06:20.731 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:06:20.731 [http-nio-8080-exec-9] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:06:20.738 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=?
2025-06-03 14:06:20.738 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:06:20.744 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 12ms
2025-06-03 14:06:20.744 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 12ms
2025-06-03 14:06:32.456 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:06:32.457 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:06:32.460 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:06:32.461 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:06:32.505 [http-nio-8080-exec-4] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: Unexpected IOException (of type java.io.FileNotFoundException): MultipartFile resource [file] cannot be resolved to absolute file path
2025-06-03 14:06:32.516 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:06:32.704 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        documents
        (created_at, description, file_path, file_size, file_type, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-03 14:06:32.730 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 上传文档 - 224ms
2025-06-03 14:06:47.978 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:06:47.981 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:06:47.984 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:06:47.985 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:06:48.006 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:06:48.011 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:06:48.015 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        notes
        (content, created_at, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-03 14:06:48.036 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 创建笔记 - 30ms
2025-06-03 14:06:48.359 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:06:48.361 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:06:48.364 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:06:48.364 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:06:48.369 [http-nio-8080-exec-8] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:06:48.372 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:06:48.375 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        notes
        (content, created_at, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-03 14:06:48.383 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 创建笔记 - 14ms
2025-06-03 14:06:48.512 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:06:48.515 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:06:48.518 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:06:48.518 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:06:48.522 [http-nio-8080-exec-7] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:06:48.526 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:06:48.530 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        notes
        (content, created_at, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-03 14:06:48.540 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 创建笔记 - 17ms
2025-06-03 14:06:50.149 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:06:50.151 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:06:50.154 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:06:50.155 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:06:50.161 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:06:50.165 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:06:50.169 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    insert 
    into
        notes
        (content, created_at, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-03 14:06:50.189 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 创建笔记 - 27ms
2025-06-03 14:06:58.889 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:06:58.890 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:06:58.893 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:06:58.893 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:06:58.898 [http-nio-8080-exec-9] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:06:58.902 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:06:58.905 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        notes
        (content, created_at, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-03 14:06:58.914 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 创建笔记 - 15ms
2025-06-03 14:07:00.959 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:07:00.960 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:07:00.963 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:07:00.964 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:07:00.967 [http-nio-8080-exec-3] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:07:00.971 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:07:00.973 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        notes
        (content, created_at, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-03 14:07:00.981 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 创建笔记 - 13ms
2025-06-03 14:10:06.426 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:10:06.428 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:10:06.431 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:10:06.431 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:10:06.435 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:10:06.438 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 14:10:06.439 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 5ms
2025-06-03 14:10:06.684 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:10:06.685 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:10:06.688 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:10:06.688 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:10:06.688 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:10:06.689 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:10:06.689 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:10:06.690 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:10:06.691 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:10:06.691 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:10:06.692 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:10:06.692 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:10:06.693 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:10:06.693 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:10:06.693 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:10:06.693 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:10:06.693 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:10:06.695 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 3ms
2025-06-03 14:10:06.697 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 5ms
2025-06-03 14:10:06.697 [http-nio-8080-exec-4] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:10:06.697 [http-nio-8080-exec-2] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:10:06.699 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:10:06.699 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=?
2025-06-03 14:10:06.700 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:10:06.705 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:10:06.705 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:10:06.711 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:10:06.711 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:10:06.719 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 22ms
2025-06-03 14:10:06.719 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:10:06.721 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:10:06.723 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:10:06.725 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:10:06.726 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:10:06.728 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 30ms
2025-06-03 14:16:28.853 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-03 14:16:28.881 [main] INFO  com.knowledge.KnowledgeBaseApplication - Starting KnowledgeBaseApplication using Java 21.0.4 with PID 20976 (D:\KnowledgeApp\backend\target\classes started by 25565 in D:\KnowledgeApp\backend)
2025-06-03 14:16:28.882 [main] DEBUG com.knowledge.KnowledgeBaseApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-03 14:16:28.882 [main] INFO  com.knowledge.KnowledgeBaseApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-03 14:16:29.434 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-03 14:16:29.474 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 36 ms. Found 4 JPA repository interfaces.
2025-06-03 14:16:29.956 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-03 14:16:29.964 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-03 14:16:29.966 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-03 14:16:29.967 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-03 14:16:30.016 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-03 14:16:30.017 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1101 ms
2025-06-03 14:16:30.110 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-03 14:16:30.154 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-03 14:16:30.174 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-03 14:16:30.304 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-03 14:16:30.319 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-03 14:16:30.430 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@58f50dd0
2025-06-03 14:16:30.430 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-03 14:16:30.472 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-03 14:16:31.104 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-03 14:16:31.175 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 14:16:31.429 [main] DEBUG com.knowledge.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-03 14:16:31.531 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-03 14:16:32.071 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-03 14:16:32.238 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4928a347, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1baf1268, org.springframework.security.web.context.SecurityContextHolderFilter@6eaf016e, org.springframework.security.web.header.HeaderWriterFilter@2e90a3de, org.springframework.web.filter.CorsFilter@6846e4e8, org.springframework.security.web.authentication.logout.LogoutFilter@a8e649e, com.knowledge.config.JwtAuthenticationFilter@435e224d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7ce87db5, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@c7485d2, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@41861964, org.springframework.security.web.session.SessionManagementFilter@45488836, org.springframework.security.web.access.ExceptionTranslationFilter@7df5358, org.springframework.security.web.access.intercept.AuthorizationFilter@6662af0a]
2025-06-03 14:16:32.452 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-03 14:16:32.465 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-03 14:16:32.472 [main] INFO  com.knowledge.KnowledgeBaseApplication - Started KnowledgeBaseApplication in 3.949 seconds (process running for 4.191)
2025-06-03 14:16:32.575 [main] INFO  com.knowledge.KnowledgeBaseApplication - MinIO存储桶初始化成功
2025-06-03 14:16:37.925 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-03 14:16:37.925 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-03 14:16:37.926 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-06-03 14:16:37.996 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:16:38.051 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:16:38.063 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:16:38.064 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:16:38.088 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:16:38.111 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 24ms
2025-06-03 14:16:38.120 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 33ms
2025-06-03 14:16:38.146 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:16:38.149 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:16:38.152 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:16:38.153 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:16:38.158 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:16:38.159 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:16:38.159 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:16:38.160 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:16:38.160 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:16:38.160 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:16:38.160 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:16:38.163 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:16:38.163 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:16:38.163 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 5ms
2025-06-03 14:16:38.163 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:16:38.163 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:16:38.164 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:16:38.164 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:16:38.164 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 6ms
2025-06-03 14:16:38.180 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:16:38.219 [http-nio-8080-exec-9] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:16:38.219 [http-nio-8080-exec-8] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:16:38.224 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=?
2025-06-03 14:16:38.224 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:16:38.234 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:16:38.238 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:16:38.238 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:16:38.240 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:16:38.242 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 21ms
2025-06-03 14:16:38.243 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:16:38.246 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:16:38.248 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:16:38.250 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:16:38.252 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 32ms
2025-06-03 14:16:47.881 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:16:47.883 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:16:47.885 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:16:47.886 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:16:47.932 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: Unexpected IOException (of type java.io.FileNotFoundException): MultipartFile resource [file] cannot be resolved to absolute file path
2025-06-03 14:16:47.940 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:16:47.944 [http-nio-8080-exec-1] ERROR com.knowledge.service.DocumentService - 文档上传失败
java.lang.RuntimeException: 不支持的文件类型: application/octet-stream
	at com.knowledge.service.DocumentService.uploadDocument(DocumentService.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.knowledge.service.DocumentService$$SpringCGLIB$$0.uploadDocument(<generated>)
	at com.knowledge.controller.DocumentController.uploadDocument(DocumentController.java:91)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.knowledge.aspect.LogAspect.around(LogAspect.java:76)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:173)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.knowledge.controller.DocumentController$$SpringCGLIB$$0.uploadDocument(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.knowledge.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:48)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-03 14:16:47.952 [http-nio-8080-exec-1] ERROR com.knowledge.aspect.LogAspect - ✗ 文档管理 - 上传文档 - 20ms - 文档上传失败: 不支持的文件类型: application/octet-stream
2025-06-03 14:16:47.954 [http-nio-8080-exec-1] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: 文档上传失败: 不支持的文件类型: application/octet-stream] with root cause
java.lang.RuntimeException: 不支持的文件类型: application/octet-stream
	at com.knowledge.service.DocumentService.uploadDocument(DocumentService.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.knowledge.service.DocumentService$$SpringCGLIB$$0.uploadDocument(<generated>)
	at com.knowledge.controller.DocumentController.uploadDocument(DocumentController.java:91)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.knowledge.aspect.LogAspect.around(LogAspect.java:76)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:173)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.knowledge.controller.DocumentController$$SpringCGLIB$$0.uploadDocument(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.knowledge.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:48)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-03 14:16:51.967 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:16:51.968 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:16:51.971 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:16:51.971 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:16:51.989 [http-nio-8080-exec-2] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: Unexpected IOException (of type java.io.FileNotFoundException): MultipartFile resource [file] cannot be resolved to absolute file path
2025-06-03 14:16:51.993 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:16:51.996 [http-nio-8080-exec-2] ERROR com.knowledge.service.DocumentService - 文档上传失败
java.lang.RuntimeException: 不支持的文件类型: application/octet-stream
	at com.knowledge.service.DocumentService.uploadDocument(DocumentService.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.knowledge.service.DocumentService$$SpringCGLIB$$0.uploadDocument(<generated>)
	at com.knowledge.controller.DocumentController.uploadDocument(DocumentController.java:91)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.knowledge.aspect.LogAspect.around(LogAspect.java:76)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:173)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.knowledge.controller.DocumentController$$SpringCGLIB$$0.uploadDocument(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.knowledge.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:48)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-03 14:16:52.002 [http-nio-8080-exec-2] ERROR com.knowledge.aspect.LogAspect - ✗ 文档管理 - 上传文档 - 12ms - 文档上传失败: 不支持的文件类型: application/octet-stream
2025-06-03 14:16:52.003 [http-nio-8080-exec-2] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: 文档上传失败: 不支持的文件类型: application/octet-stream] with root cause
java.lang.RuntimeException: 不支持的文件类型: application/octet-stream
	at com.knowledge.service.DocumentService.uploadDocument(DocumentService.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.knowledge.service.DocumentService$$SpringCGLIB$$0.uploadDocument(<generated>)
	at com.knowledge.controller.DocumentController.uploadDocument(DocumentController.java:91)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.knowledge.aspect.LogAspect.around(LogAspect.java:76)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:173)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.knowledge.controller.DocumentController$$SpringCGLIB$$0.uploadDocument(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.knowledge.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:48)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-03 14:21:06.471 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-03 14:21:06.501 [main] INFO  com.knowledge.KnowledgeBaseApplication - Starting KnowledgeBaseApplication using Java 21.0.4 with PID 10776 (D:\KnowledgeApp\backend\target\classes started by 25565 in D:\KnowledgeApp\backend)
2025-06-03 14:21:06.501 [main] DEBUG com.knowledge.KnowledgeBaseApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-03 14:21:06.502 [main] INFO  com.knowledge.KnowledgeBaseApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-03 14:21:07.040 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-03 14:21:07.081 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 37 ms. Found 4 JPA repository interfaces.
2025-06-03 14:21:07.549 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-03 14:21:07.557 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-03 14:21:07.558 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-03 14:21:07.559 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-03 14:21:07.608 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-03 14:21:07.609 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1075 ms
2025-06-03 14:21:07.700 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-03 14:21:07.744 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-03 14:21:07.767 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-03 14:21:07.899 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-03 14:21:07.917 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-03 14:21:08.032 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@92fd091
2025-06-03 14:21:08.034 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-03 14:21:08.077 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-03 14:21:08.722 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-03 14:21:08.799 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 14:21:09.035 [main] DEBUG com.knowledge.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-03 14:21:09.139 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-03 14:21:09.684 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-03 14:21:09.860 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@7802fc4e, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1994665d, org.springframework.security.web.context.SecurityContextHolderFilter@139f1db4, org.springframework.security.web.header.HeaderWriterFilter@3094111c, org.springframework.web.filter.CorsFilter@4497fcd9, org.springframework.security.web.authentication.logout.LogoutFilter@750afe12, com.knowledge.config.JwtAuthenticationFilter@c950fd, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@532860c7, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@9d573a6, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3d44da41, org.springframework.security.web.session.SessionManagementFilter@806a687, org.springframework.security.web.access.ExceptionTranslationFilter@13ea9afc, org.springframework.security.web.access.intercept.AuthorizationFilter@53a1cff1]
2025-06-03 14:21:10.086 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-03 14:21:10.100 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-03 14:21:10.106 [main] INFO  com.knowledge.KnowledgeBaseApplication - Started KnowledgeBaseApplication in 3.969 seconds (process running for 4.206)
2025-06-03 14:21:10.201 [main] INFO  com.knowledge.KnowledgeBaseApplication - MinIO存储桶初始化成功
2025-06-03 14:21:14.880 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-03 14:21:14.880 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-03 14:21:14.882 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-03 14:21:14.951 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:21:15.010 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:21:15.021 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:21:15.022 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:21:15.046 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:21:15.081 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 35ms
2025-06-03 14:21:15.094 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 48ms
2025-06-03 14:21:15.130 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:21:15.133 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:21:15.136 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:21:15.137 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:21:15.139 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:21:15.139 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:21:15.139 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:21:15.141 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:21:15.141 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:21:15.141 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:21:15.141 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:21:15.145 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:21:15.145 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:21:15.145 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:21:15.145 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 14:21:15.146 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:21:15.146 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:21:15.146 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:21:15.146 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 5ms
2025-06-03 14:21:15.169 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:21:15.193 [http-nio-8080-exec-8] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:21:15.193 [http-nio-8080-exec-7] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:21:15.198 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=?
2025-06-03 14:21:15.199 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:21:15.209 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:21:15.213 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:21:15.213 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:21:15.217 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:21:15.218 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 24ms
2025-06-03 14:21:15.219 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:21:15.221 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:21:15.224 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:21:15.226 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:21:15.229 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 35ms
2025-06-03 14:21:22.529 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:21:22.531 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:21:22.533 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:21:22.534 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:21:22.581 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: Unexpected IOException (of type java.io.FileNotFoundException): MultipartFile resource [file] cannot be resolved to absolute file path
2025-06-03 14:21:22.589 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:21:22.592 [http-nio-8080-exec-1] DEBUG com.knowledge.service.DocumentService - 文件信息 - 名称: 技术美术学习规划.md, MIME类型: application/octet-stream, 大小: 8492
2025-06-03 14:21:22.592 [http-nio-8080-exec-1] WARN  com.knowledge.service.DocumentService - 文件被识别为 application/octet-stream，可能是文件类型识别问题
2025-06-03 14:21:22.619 [http-nio-8080-exec-1] INFO  com.knowledge.service.DocumentService - 文件上传到MinIO成功: 1/1748931682593_技术美术学习规划.md
2025-06-03 14:21:22.634 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        documents
        (created_at, description, file_path, file_size, file_type, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-03 14:21:22.658 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 上传文档 - 76ms
2025-06-03 14:22:50.811 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:22:50.813 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:22:50.816 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:22:50.817 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:22:50.823 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:22:50.826 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 14:22:50.827 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 6ms
2025-06-03 14:22:50.983 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:22:50.984 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:22:50.988 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:22:50.988 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:22:50.990 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:22:50.990 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:22:50.990 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:22:50.991 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:22:50.991 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:22:50.991 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:22:50.991 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:22:50.993 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:22:50.993 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:22:50.993 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 2ms
2025-06-03 14:22:50.994 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:22:50.994 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:22:50.994 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:22:50.995 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:22:50.995 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 4ms
2025-06-03 14:22:50.998 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:22:50.998 [http-nio-8080-exec-4] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:22:51.001 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:22:51.001 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=?
2025-06-03 14:22:51.001 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:22:51.005 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:22:51.005 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:22:51.008 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:22:51.011 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:22:51.011 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:22:51.014 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:22:51.014 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 16ms
2025-06-03 14:22:51.017 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:22:51.020 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:22:51.023 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:22:51.025 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 26ms
2025-06-03 14:22:57.463 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:22:57.465 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:22:57.468 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:22:57.469 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:22:57.474 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:22:57.478 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 5ms
2025-06-03 14:22:57.479 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 6ms
2025-06-03 14:22:57.646 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:22:57.648 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:22:57.651 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:22:57.651 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:22:57.655 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:22:57.656 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:22:57.656 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:22:57.656 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:22:57.657 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:22:57.658 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:22:57.659 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:22:57.659 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:22:57.659 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 3ms
2025-06-03 14:22:57.659 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:22:57.660 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 4ms
2025-06-03 14:22:57.661 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:22:57.661 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:22:57.661 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:22:57.662 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:22:57.664 [http-nio-8080-exec-7] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:22:57.666 [http-nio-8080-exec-2] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:22:57.668 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=?
2025-06-03 14:22:57.669 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:22:57.669 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:22:57.673 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:22:57.674 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:22:57.676 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:22:57.676 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:22:57.679 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 14ms
2025-06-03 14:22:57.679 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:22:57.682 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:22:57.684 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:22:57.688 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:22:57.690 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:22:57.693 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 26ms
2025-06-03 14:23:16.970 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-03 14:23:16.998 [main] INFO  com.knowledge.KnowledgeBaseApplication - Starting KnowledgeBaseApplication using Java 21.0.4 with PID 21732 (D:\KnowledgeApp\backend\target\classes started by 25565 in D:\KnowledgeApp\backend)
2025-06-03 14:23:16.998 [main] DEBUG com.knowledge.KnowledgeBaseApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-03 14:23:16.999 [main] INFO  com.knowledge.KnowledgeBaseApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-03 14:23:17.534 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-03 14:23:17.574 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 36 ms. Found 4 JPA repository interfaces.
2025-06-03 14:23:18.024 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-03 14:23:18.032 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-03 14:23:18.033 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-03 14:23:18.034 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-03 14:23:18.084 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-03 14:23:18.084 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1052 ms
2025-06-03 14:23:18.178 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-03 14:23:18.213 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-03 14:23:18.234 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-03 14:23:18.364 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-03 14:23:18.381 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-03 14:23:18.492 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@11295cb1
2025-06-03 14:23:18.494 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-03 14:23:18.530 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-03 14:23:19.158 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-03 14:23:19.245 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 14:23:19.481 [main] DEBUG com.knowledge.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-03 14:23:19.584 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-03 14:23:20.117 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-03 14:23:20.292 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@6662af0a, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@665f19d, org.springframework.security.web.context.SecurityContextHolderFilter@a9339e5, org.springframework.security.web.header.HeaderWriterFilter@49d26eba, org.springframework.web.filter.CorsFilter@4928a347, org.springframework.security.web.authentication.logout.LogoutFilter@66a0fae1, com.knowledge.config.JwtAuthenticationFilter@182469d0, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6eaf016e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6fa73db5, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1baf1268, org.springframework.security.web.session.SessionManagementFilter@c8dc1ef, org.springframework.security.web.access.ExceptionTranslationFilter@33bd3549, org.springframework.security.web.access.intercept.AuthorizationFilter@4c006046]
2025-06-03 14:23:20.501 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-03 14:23:20.513 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-03 14:23:20.519 [main] INFO  com.knowledge.KnowledgeBaseApplication - Started KnowledgeBaseApplication in 3.894 seconds (process running for 4.145)
2025-06-03 14:23:20.613 [main] INFO  com.knowledge.KnowledgeBaseApplication - MinIO存储桶初始化成功
2025-06-03 14:23:26.302 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-03 14:23:26.302 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-03 14:23:26.303 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-06-03 14:23:26.375 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:23:26.431 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:23:26.442 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:23:26.444 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:23:26.468 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:23:26.491 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 23ms
2025-06-03 14:23:26.499 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 32ms
2025-06-03 14:23:26.529 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:23:26.531 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:23:26.534 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:23:26.534 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:23:26.536 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:23:26.537 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:23:26.537 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:23:26.538 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:23:26.538 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:23:26.538 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:23:26.540 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:23:26.540 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:23:26.540 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:23:26.541 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:23:26.541 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:23:26.541 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:23:26.541 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:23:26.544 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 5ms
2025-06-03 14:23:26.544 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 5ms
2025-06-03 14:23:26.559 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:23:26.580 [http-nio-8080-exec-2] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:23:26.580 [http-nio-8080-exec-9] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:23:26.587 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=?
2025-06-03 14:23:26.588 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:23:26.598 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:23:26.602 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:23:26.602 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:23:26.605 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:23:26.606 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:23:26.607 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:23:26.609 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:23:26.609 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 28ms
2025-06-03 14:23:26.612 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:23:26.614 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:23:26.616 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 34ms
2025-06-03 14:23:32.744 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:23:32.746 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:23:32.749 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:23:32.750 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:23:32.799 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: Unexpected IOException (of type java.io.FileNotFoundException): MultipartFile resource [file] cannot be resolved to absolute file path
2025-06-03 14:23:32.806 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:23:32.809 [http-nio-8080-exec-1] DEBUG com.knowledge.service.DocumentService - 文件信息 - 名称: 技术美术学习规划.md, MIME类型: application/octet-stream, 大小: 8492
2025-06-03 14:23:32.810 [http-nio-8080-exec-1] WARN  com.knowledge.service.DocumentService - 文件被识别为 application/octet-stream，可能是文件类型识别问题
2025-06-03 14:23:32.836 [http-nio-8080-exec-1] INFO  com.knowledge.service.DocumentService - 文件上传到MinIO成功: 1/1748931812810_技术美术学习规划.md
2025-06-03 14:23:32.852 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        documents
        (created_at, description, file_path, file_size, file_type, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-03 14:23:32.880 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 上传文档 - 80ms
2025-06-03 14:23:32.896 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:23:32.898 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:23:32.901 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:23:32.901 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:23:32.905 [http-nio-8080-exec-7] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:23:32.908 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=?
2025-06-03 14:23:32.913 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:23:32.917 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:23:32.921 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:23:32.924 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 19ms
2025-06-03 14:23:40.903 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:23:40.905 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:23:40.908 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:23:40.908 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:23:40.966 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:23:40.970 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:23:40.973 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        notes
        (content, created_at, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-03 14:23:40.979 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 创建笔记 - 12ms
2025-06-03 14:23:41.015 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:23:41.017 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:23:41.020 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:23:41.021 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:23:41.026 [http-nio-8080-exec-4] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:23:41.030 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:23:41.033 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        notes
        (content, created_at, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-03 14:23:41.040 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 创建笔记 - 14ms
2025-06-03 14:26:26.751 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:26:26.751 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:26:26.751 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:26:26.751 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:26:26.755 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:26:26.755 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:26:26.755 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:26:26.755 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:26:26.763 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:26:26.763 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:26:26.763 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:26:26.763 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:26:26.763 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:26:26.763 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:26:26.764 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:26:26.764 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:26:26.771 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:26:26.772 [http-nio-8080-exec-4] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:26:26.772 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:26:26.773 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:26:26.774 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 14:26:26.775 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:26:26.775 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=?
2025-06-03 14:26:26.775 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 5ms
2025-06-03 14:26:26.781 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:26:26.782 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:26:26.785 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:26:26.785 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:26:26.787 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:26:26.788 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:26:26.789 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:26:26.790 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 18ms
2025-06-03 14:26:26.791 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:26:26.794 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:26:26.796 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:26:26.798 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:26:26.800 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:26:26.803 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 31ms
2025-06-03 14:27:36.972 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:27:36.972 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:27:36.972 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:27:36.972 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:27:36.973 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:27:36.973 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:27:36.973 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:27:36.973 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:27:36.975 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:27:36.975 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:27:36.975 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:27:36.976 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:27:36.975 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:27:36.975 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:27:36.976 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:27:36.976 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:27:36.979 [http-nio-8080-exec-4] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:27:36.979 [http-nio-8080-exec-8] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:27:36.979 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:27:36.981 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:27:36.981 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=?
2025-06-03 14:27:36.982 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:27:36.982 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 14:27:36.983 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 5ms
2025-06-03 14:27:36.985 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:27:36.985 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:27:36.988 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:27:36.988 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:27:36.990 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:27:36.991 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:27:36.993 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:27:36.993 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 13ms
2025-06-03 14:27:36.995 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:27:36.998 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:27:37.000 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:27:37.003 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:27:37.006 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:27:37.007 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 27ms
2025-06-03 14:27:51.014 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:27:51.014 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:27:51.014 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:27:51.014 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:27:51.016 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:27:51.016 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:27:51.016 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:27:51.016 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:27:51.019 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:27:51.019 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:27:51.019 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:27:51.019 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:27:51.019 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:27:51.019 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:27:51.019 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:27:51.019 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:27:51.022 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:27:51.023 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:27:51.023 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:27:51.025 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:27:51.026 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:27:51.026 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=?
2025-06-03 14:27:51.026 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 14:27:51.027 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 5ms
2025-06-03 14:27:51.029 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:27:51.030 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:27:51.032 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:27:51.033 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:27:51.035 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:27:51.036 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:27:51.036 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:27:51.039 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:27:51.039 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 16ms
2025-06-03 14:27:51.041 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:27:51.044 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:27:51.046 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:27:51.049 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:27:51.051 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 28ms
2025-06-03 14:28:03.430 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:28:03.430 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:28:03.430 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:28:03.430 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:28:03.431 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:28:03.431 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:28:03.431 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:28:03.431 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:28:03.434 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:28:03.434 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:28:03.434 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:28:03.435 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:28:03.434 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:28:03.435 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:28:03.435 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:28:03.436 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:28:03.439 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:28:03.440 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:28:03.442 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:28:03.443 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:28:03.443 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 14:28:03.444 [http-nio-8080-exec-9] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:28:03.444 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 5ms
2025-06-03 14:28:03.446 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:28:03.447 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=?
2025-06-03 14:28:03.450 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:28:03.452 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:28:03.453 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:28:03.455 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:28:03.456 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:28:03.458 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:28:03.459 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:28:03.461 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:28:03.462 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 17ms
2025-06-03 14:28:03.462 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:28:03.465 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:28:03.467 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:28:03.469 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 29ms
2025-06-03 14:28:29.118 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:28:29.119 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:28:29.122 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:28:29.122 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:28:29.127 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:28:29.129 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 3ms
2025-06-03 14:28:29.130 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 4ms
2025-06-03 14:28:29.208 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:28:29.209 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:28:29.210 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:28:29.211 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:28:29.211 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:28:29.212 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:28:29.212 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:28:29.212 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:28:29.213 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:28:29.213 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:28:29.215 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:28:29.216 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:28:29.216 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:28:29.216 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:28:29.216 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:28:29.216 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:28:29.217 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:28:29.219 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 3ms
2025-06-03 14:28:29.220 [http-nio-8080-exec-5] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:28:29.220 [http-nio-8080-exec-2] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:28:29.220 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 4ms
2025-06-03 14:28:29.222 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:28:29.222 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=?
2025-06-03 14:28:29.223 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:28:29.226 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:28:29.226 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:28:29.229 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:28:29.229 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:28:29.231 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:28:29.232 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:28:29.234 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:28:29.235 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 15ms
2025-06-03 14:28:29.237 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:28:29.238 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:28:29.241 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:28:29.243 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:28:29.245 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:28:29.246 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 26ms
2025-06-03 14:28:36.517 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:28:36.518 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:28:36.521 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:28:36.521 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:28:36.539 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: Unexpected IOException (of type java.io.FileNotFoundException): MultipartFile resource [file] cannot be resolved to absolute file path
2025-06-03 14:28:36.544 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:28:36.546 [http-nio-8080-exec-10] DEBUG com.knowledge.service.DocumentService - 文件信息 - 名称: 技术美术学习规划.md, MIME类型: application/octet-stream, 大小: 8492
2025-06-03 14:28:36.547 [http-nio-8080-exec-10] WARN  com.knowledge.service.DocumentService - 文件被识别为 application/octet-stream，可能是文件类型识别问题
2025-06-03 14:28:36.563 [http-nio-8080-exec-10] INFO  com.knowledge.service.DocumentService - 文件上传到MinIO成功: 1/1748932116547_技术美术学习规划.md
2025-06-03 14:28:36.565 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    insert 
    into
        documents
        (created_at, description, file_path, file_size, file_type, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-03 14:28:36.579 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 上传文档 - 38ms
2025-06-03 14:28:36.593 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:28:36.595 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:28:36.597 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:28:36.598 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:28:36.600 [http-nio-8080-exec-7] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:28:36.604 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=?
2025-06-03 14:28:36.608 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:28:36.612 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:28:36.615 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:28:36.619 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:28:36.622 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 21ms
2025-06-03 14:29:07.526 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-03 14:29:07.553 [main] INFO  com.knowledge.KnowledgeBaseApplication - Starting KnowledgeBaseApplication using Java 21.0.4 with PID 11500 (D:\KnowledgeApp\backend\target\classes started by 25565 in D:\KnowledgeApp\backend)
2025-06-03 14:29:07.554 [main] DEBUG com.knowledge.KnowledgeBaseApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-03 14:29:07.554 [main] INFO  com.knowledge.KnowledgeBaseApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-03 14:29:08.077 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-03 14:29:08.116 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 34 ms. Found 4 JPA repository interfaces.
2025-06-03 14:29:08.562 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-03 14:29:08.570 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-03 14:29:08.571 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-03 14:29:08.572 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-03 14:29:08.619 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-03 14:29:08.620 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1037 ms
2025-06-03 14:29:08.713 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-03 14:29:08.762 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-03 14:29:08.786 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-03 14:29:08.934 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-03 14:29:08.953 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-03 14:29:09.072 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@56f2c9e8
2025-06-03 14:29:09.073 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-03 14:29:09.114 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-03 14:29:09.759 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-03 14:29:09.841 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 14:29:10.105 [main] DEBUG com.knowledge.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-03 14:29:10.209 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-03 14:29:10.782 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-03 14:29:10.963 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@71590f85, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6565f3, org.springframework.security.web.context.SecurityContextHolderFilter@73e054c0, org.springframework.security.web.header.HeaderWriterFilter@7bbd133c, org.springframework.web.filter.CorsFilter@891f18f, org.springframework.security.web.authentication.logout.LogoutFilter@685783b1, com.knowledge.config.JwtAuthenticationFilter@5e8bc83e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@73760b13, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6b5df313, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@189e986f, org.springframework.security.web.session.SessionManagementFilter@c7485d2, org.springframework.security.web.access.ExceptionTranslationFilter@62ccbd95, org.springframework.security.web.access.intercept.AuthorizationFilter@4db8b888]
2025-06-03 14:29:11.174 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-03 14:29:11.186 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-03 14:29:11.192 [main] INFO  com.knowledge.KnowledgeBaseApplication - Started KnowledgeBaseApplication in 3.992 seconds (process running for 4.268)
2025-06-03 14:29:11.296 [main] INFO  com.knowledge.KnowledgeBaseApplication - MinIO存储桶初始化成功
2025-06-03 14:29:13.103 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-03 14:29:13.103 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-03 14:29:13.105 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-03 14:29:13.188 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:29:13.241 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:29:13.253 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:29:13.255 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:29:13.281 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:29:13.305 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 25ms
2025-06-03 14:29:13.314 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 34ms
2025-06-03 14:29:13.346 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:29:13.348 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:29:13.351 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:29:13.352 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:29:13.353 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:29:13.354 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:29:13.354 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:29:13.355 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:29:13.355 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:29:13.355 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:29:13.355 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:29:13.357 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:29:13.357 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:29:13.358 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:29:13.357 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:29:13.358 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 3ms
2025-06-03 14:29:13.358 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:29:13.358 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:29:13.358 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 3ms
2025-06-03 14:29:13.376 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:29:13.400 [http-nio-8080-exec-7] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:29:13.400 [http-nio-8080-exec-8] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:29:13.406 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:29:13.406 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:29:13.420 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:29:13.425 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:29:13.425 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:29:13.429 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:29:13.430 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:29:13.433 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:29:13.434 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:29:13.436 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:29:13.438 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:29:13.438 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:29:13.441 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:29:13.442 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 41ms
2025-06-03 14:29:13.444 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:29:13.446 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:29:13.450 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 49ms
2025-06-03 14:29:23.976 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:29:23.977 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:29:23.980 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:29:23.981 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:29:24.034 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: Unexpected IOException (of type java.io.FileNotFoundException): MultipartFile resource [file] cannot be resolved to absolute file path
2025-06-03 14:29:24.042 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:29:24.045 [http-nio-8080-exec-1] DEBUG com.knowledge.service.DocumentService - 文件信息 - 名称: 技术美术学习规划.md, MIME类型: application/octet-stream, 大小: 8492
2025-06-03 14:29:24.045 [http-nio-8080-exec-1] WARN  com.knowledge.service.DocumentService - 文件被识别为 application/octet-stream，可能是文件类型识别问题
2025-06-03 14:29:24.068 [http-nio-8080-exec-1] INFO  com.knowledge.service.DocumentService - 文件上传到MinIO成功: 1/1748932164046_技术美术学习规划.md
2025-06-03 14:29:24.082 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        documents
        (created_at, description, file_path, file_size, file_type, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-03 14:29:24.106 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 上传文档 - 71ms
2025-06-03 14:29:24.123 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:29:24.124 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:29:24.127 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:29:24.127 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:29:24.136 [http-nio-8080-exec-3] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:29:24.139 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:29:24.144 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:29:24.148 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:29:24.151 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:29:24.155 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:29:24.158 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:29:24.161 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 24ms
2025-06-03 14:29:26.501 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:29:26.503 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:29:26.506 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:29:26.506 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:29:26.557 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:29:26.562 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:29:26.565 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        notes
        (content, created_at, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-03 14:29:26.573 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 创建笔记 - 14ms
2025-06-03 14:29:26.623 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:29:26.626 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:29:26.629 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:29:26.630 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:29:26.635 [http-nio-8080-exec-5] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:29:26.638 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:29:26.641 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        notes
        (content, created_at, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-03 14:29:26.649 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 创建笔记 - 14ms
2025-06-03 14:30:38.186 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:30:38.187 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:30:38.190 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:30:38.191 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:30:38.210 [http-nio-8080-exec-9] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: Unexpected IOException (of type java.io.FileNotFoundException): MultipartFile resource [file] cannot be resolved to absolute file path
2025-06-03 14:30:38.214 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:30:38.218 [http-nio-8080-exec-9] DEBUG com.knowledge.service.DocumentService - 文件信息 - 名称: 技术美术学习规划.md, MIME类型: application/octet-stream, 大小: 8492
2025-06-03 14:30:38.218 [http-nio-8080-exec-9] WARN  com.knowledge.service.DocumentService - 文件被识别为 application/octet-stream，可能是文件类型识别问题
2025-06-03 14:30:38.229 [http-nio-8080-exec-9] INFO  com.knowledge.service.DocumentService - 文件上传到MinIO成功: 1/1748932238219_技术美术学习规划.md
2025-06-03 14:30:38.230 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        documents
        (created_at, description, file_path, file_size, file_type, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-03 14:30:38.240 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 上传文档 - 29ms
2025-06-03 14:30:38.258 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:30:38.261 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:30:38.263 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:30:38.264 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:30:38.268 [http-nio-8080-exec-2] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:30:38.272 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:30:38.279 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:30:38.283 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:30:38.287 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:30:38.291 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:30:38.295 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:30:38.299 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:30:38.301 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 32ms
2025-06-03 14:30:58.525 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:30:58.526 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:30:58.529 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:30:58.529 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:30:58.532 [http-nio-8080-exec-5] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:30:58.536 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:30:58.539 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        notes
        (content, created_at, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-03 14:30:58.547 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 创建笔记 - 13ms
2025-06-03 14:33:05.537 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:33:05.537 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:33:05.537 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:33:05.538 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:33:05.538 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:05.538 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:05.538 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:05.540 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:05.542 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:33:05.542 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:33:05.542 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:33:05.542 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:33:05.542 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:33:05.542 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:33:05.542 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:33:05.542 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:33:05.545 [http-nio-8080-exec-9] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:33:05.545 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:33:05.547 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:05.549 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:33:05.549 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:33:05.549 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:33:05.550 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 14:33:05.551 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 6ms
2025-06-03 14:33:05.553 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:33:05.554 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:05.556 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:05.557 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:05.558 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:05.560 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:05.560 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:05.563 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:05.564 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:05.565 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:05.566 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:05.568 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:05.569 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:05.571 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:05.571 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 25ms
2025-06-03 14:33:05.573 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:05.575 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:05.578 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:05.580 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:05.582 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 35ms
2025-06-03 14:33:16.196 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:33:16.196 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:33:16.196 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:33:16.196 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:33:16.197 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:16.197 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:16.197 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:16.197 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:16.200 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:33:16.200 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:33:16.200 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:33:16.200 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:33:16.200 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:33:16.200 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:33:16.200 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:33:16.200 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:33:16.203 [http-nio-8080-exec-7] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:33:16.203 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:33:16.203 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:16.206 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:33:16.206 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:33:16.206 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:33:16.206 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 14:33:16.207 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 5ms
2025-06-03 14:33:16.209 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:16.211 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:33:16.214 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:16.214 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:16.216 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:16.217 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:16.219 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:16.219 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:16.220 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:16.221 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:16.222 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:16.223 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:16.224 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:16.225 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:16.225 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 21ms
2025-06-03 14:33:16.227 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:16.229 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:16.231 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:16.234 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:16.236 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 33ms
2025-06-03 14:33:36.722 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:33:36.722 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:33:36.722 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:33:36.722 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:33:36.723 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:36.723 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:36.724 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:36.724 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:36.726 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:33:36.726 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:33:36.726 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:33:36.726 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:33:36.726 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:33:36.726 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:33:36.726 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:33:36.726 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:33:36.731 [http-nio-8080-exec-5] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:33:36.731 [http-nio-8080-exec-4] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:33:36.731 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:36.732 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:33:36.733 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:33:36.734 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:33:36.734 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 14:33:36.735 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 5ms
2025-06-03 14:33:36.738 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:36.739 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:33:36.741 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:36.742 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:36.744 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:36.746 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:36.748 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:36.749 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:36.751 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:36.753 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:36.754 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:36.756 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:36.756 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:36.758 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 27ms
2025-06-03 14:33:36.758 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:36.761 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:36.764 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:36.766 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:36.768 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:36.770 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 39ms
2025-06-03 14:33:48.057 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:33:48.057 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:33:48.057 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:33:48.057 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:33:48.058 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:48.058 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:48.058 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:48.058 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:48.060 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:33:48.060 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:33:48.060 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:33:48.060 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:33:48.061 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:33:48.061 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:33:48.061 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:33:48.061 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:33:48.064 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:33:48.064 [http-nio-8080-exec-3] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:33:48.065 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:33:48.067 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:33:48.067 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:33:48.067 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:33:48.067 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 3ms
2025-06-03 14:33:48.068 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 4ms
2025-06-03 14:33:48.070 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:33:48.070 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:48.073 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:48.074 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:48.076 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:48.076 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:48.078 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:48.079 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:48.081 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:48.082 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:48.082 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:48.083 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:48.083 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:33:48.086 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:48.086 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 21ms
2025-06-03 14:33:48.088 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:48.089 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:48.092 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:48.094 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:33:48.096 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 31ms
2025-06-03 14:34:09.413 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:34:09.413 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:34:09.413 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:34:09.413 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:34:09.414 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:34:09.414 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:34:09.414 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:34:09.414 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:34:09.416 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:34:09.416 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:34:09.416 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:34:09.416 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:34:09.417 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:34:09.417 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:34:09.417 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:34:09.417 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:34:09.419 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:34:09.420 [http-nio-8080-exec-2] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:34:09.420 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:34:09.421 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:34:09.422 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:34:09.422 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 3ms
2025-06-03 14:34:09.422 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:34:09.422 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 3ms
2025-06-03 14:34:09.425 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:34:09.426 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:34:09.428 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:34:09.428 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:34:09.430 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:34:09.431 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:34:09.432 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:34:09.433 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:34:09.434 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:34:09.435 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:34:09.435 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:34:09.437 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:34:09.438 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:34:09.439 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:34:09.439 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 19ms
2025-06-03 14:34:09.440 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:34:09.443 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:34:09.445 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:34:09.447 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:34:09.450 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 30ms
2025-06-03 14:35:06.037 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:35:06.038 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:35:06.041 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:35:06.042 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:35:06.047 [http-nio-8080-exec-3] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:35:06.051 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:35:06.054 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        notes
        (content, created_at, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-03 14:35:06.061 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 创建笔记 - 13ms
2025-06-03 14:35:06.073 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:35:06.074 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:35:06.076 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:35:06.077 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:35:06.080 [http-nio-8080-exec-5] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:35:06.083 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:35:06.088 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:35:06.090 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:35:06.092 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:35:06.094 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:35:06.096 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:35:06.098 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:35:06.100 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:35:06.102 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:35:06.103 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:35:06.105 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:35:06.106 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:35:06.108 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:35:06.109 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:35:06.111 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 30ms
2025-06-03 14:36:20.492 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:36:20.494 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:36:20.496 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:36:20.496 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:36:20.501 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:36:20.504 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 3ms
2025-06-03 14:36:20.504 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 4ms
2025-06-03 14:36:20.578 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:36:20.579 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:36:20.582 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:36:20.582 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:36:20.582 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:36:20.583 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:36:20.583 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:36:20.583 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:36:20.584 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:36:20.584 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:36:20.586 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:36:20.586 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:36:20.586 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:36:20.586 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:36:20.587 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:36:20.587 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:36:20.587 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:36:20.589 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 14:36:20.589 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 4ms
2025-06-03 14:36:20.590 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:36:20.590 [http-nio-8080-exec-7] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:36:20.592 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:36:20.592 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:36:20.593 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:36:20.597 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:36:20.597 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:36:20.599 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:36:20.600 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:36:20.602 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:36:20.603 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:36:20.604 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:36:20.605 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:36:20.605 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:36:20.607 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:36:20.607 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:36:20.609 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:36:20.610 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:36:20.611 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:36:20.612 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 22ms
2025-06-03 14:36:20.613 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:36:20.615 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:36:20.617 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:36:20.619 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:36:20.621 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:36:20.623 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 32ms
2025-06-03 14:37:53.265 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:37:53.265 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:37:53.265 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:37:53.265 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:37:53.266 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:37:53.266 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:37:53.266 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:37:53.266 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:37:53.269 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:37:53.269 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:37:53.269 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:37:53.269 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:37:53.270 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:37:53.270 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:37:53.270 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:37:53.270 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:37:53.273 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:37:53.273 [http-nio-8080-exec-7] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:37:53.273 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:37:53.275 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:37:53.276 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:37:53.276 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:37:53.276 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 14:37:53.277 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 5ms
2025-06-03 14:37:53.280 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:37:53.280 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:37:53.282 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:37:53.283 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:37:53.285 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:37:53.285 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:37:53.287 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:37:53.288 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:37:53.289 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:37:53.289 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:37:53.290 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:37:53.292 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:37:53.292 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:37:53.294 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 20ms
2025-06-03 14:37:53.294 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:37:53.296 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:37:53.297 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:37:53.300 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:37:53.301 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:37:53.303 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:37:53.305 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 31ms
2025-06-03 14:39:18.908 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-03 14:39:18.936 [main] INFO  com.knowledge.KnowledgeBaseApplication - Starting KnowledgeBaseApplication using Java 21.0.4 with PID 20696 (D:\KnowledgeApp\backend\target\classes started by 25565 in D:\KnowledgeApp\backend)
2025-06-03 14:39:18.936 [main] DEBUG com.knowledge.KnowledgeBaseApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-03 14:39:18.937 [main] INFO  com.knowledge.KnowledgeBaseApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-03 14:39:19.458 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-03 14:39:19.500 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 38 ms. Found 4 JPA repository interfaces.
2025-06-03 14:39:19.956 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-03 14:39:19.964 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-03 14:39:19.966 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-03 14:39:19.966 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-03 14:39:20.016 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-03 14:39:20.017 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1050 ms
2025-06-03 14:39:20.113 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-03 14:39:20.150 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-03 14:39:20.170 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-03 14:39:20.301 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-03 14:39:20.317 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-03 14:39:20.430 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@57fce8b
2025-06-03 14:39:20.432 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-03 14:39:20.470 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-03 14:39:21.113 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-03 14:39:21.187 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 14:39:21.447 [main] DEBUG com.knowledge.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-03 14:39:21.549 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-03 14:39:22.070 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-03 14:39:22.235 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@224855fe, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4c006046, org.springframework.security.web.context.SecurityContextHolderFilter@c8dc1ef, org.springframework.security.web.header.HeaderWriterFilter@33bd3549, org.springframework.web.filter.CorsFilter@4fad5e7, org.springframework.security.web.authentication.logout.LogoutFilter@639ad5d9, com.knowledge.config.JwtAuthenticationFilter@6908674b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@45488836, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@a9339e5, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6662af0a, org.springframework.security.web.session.SessionManagementFilter@7c9a39cb, org.springframework.security.web.access.ExceptionTranslationFilter@7029653c, org.springframework.security.web.access.intercept.AuthorizationFilter@5303762f]
2025-06-03 14:39:22.448 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-03 14:39:22.461 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-03 14:39:22.467 [main] INFO  com.knowledge.KnowledgeBaseApplication - Started KnowledgeBaseApplication in 3.895 seconds (process running for 4.199)
2025-06-03 14:39:22.568 [main] INFO  com.knowledge.KnowledgeBaseApplication - MinIO存储桶初始化成功
2025-06-03 14:39:26.968 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-03 14:39:26.968 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-03 14:39:26.969 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-03 14:39:27.065 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:27.117 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:27.128 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:27.129 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:27.154 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:27.179 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 24ms
2025-06-03 14:39:27.186 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 33ms
2025-06-03 14:39:27.218 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:27.219 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:27.223 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:27.224 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:27.227 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:27.227 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:27.227 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:27.228 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:27.228 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:27.229 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:27.229 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:27.231 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:27.231 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:27.231 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:27.231 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 3ms
2025-06-03 14:39:27.232 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:27.232 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:27.232 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:27.232 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 4ms
2025-06-03 14:39:27.248 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:39:27.269 [http-nio-8080-exec-7] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:27.269 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:27.276 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:39:27.276 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:39:27.290 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:39:27.295 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:27.295 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:27.298 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:27.299 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:27.301 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:27.302 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:27.303 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:27.305 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:27.305 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:27.307 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:27.308 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:27.309 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:27.310 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:27.310 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:27.312 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:27.313 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 43ms
2025-06-03 14:39:27.314 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:27.316 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:27.319 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:27.322 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 52ms
2025-06-03 14:39:29.227 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:29.229 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:29.231 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:29.231 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:29.244 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    where
        d1_0.id=?
2025-06-03 14:39:29.263 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    delete 
    from
        document_tags 
    where
        document_id=?
2025-06-03 14:39:29.271 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    delete 
    from
        documents 
    where
        id=?
2025-06-03 14:39:29.282 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 删除文档 - 41ms
2025-06-03 14:39:29.292 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:29.294 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:29.296 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:29.296 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:29.299 [http-nio-8080-exec-3] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:29.302 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:39:29.307 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:29.310 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:29.313 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:29.316 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:29.320 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:29.322 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 23ms
2025-06-03 14:39:30.946 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:30.948 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:30.950 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:30.951 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:30.956 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    where
        d1_0.id=?
2025-06-03 14:39:30.963 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    delete 
    from
        document_tags 
    where
        document_id=?
2025-06-03 14:39:30.964 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    delete 
    from
        documents 
    where
        id=?
2025-06-03 14:39:30.971 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 删除文档 - 17ms
2025-06-03 14:39:30.983 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:30.985 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:30.987 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:30.987 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:30.990 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:30.994 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:39:30.999 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:31.003 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:31.007 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:31.011 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:31.013 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 22ms
2025-06-03 14:39:33.065 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:33.066 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:33.068 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:33.068 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:33.073 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    where
        d1_0.id=?
2025-06-03 14:39:33.079 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    delete 
    from
        document_tags 
    where
        document_id=?
2025-06-03 14:39:33.082 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    delete 
    from
        documents 
    where
        id=?
2025-06-03 14:39:33.089 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 删除文档 - 18ms
2025-06-03 14:39:33.102 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:33.103 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:33.107 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:33.107 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:33.110 [http-nio-8080-exec-7] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:33.113 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:39:33.118 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:33.121 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:33.124 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:33.126 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 16ms
2025-06-03 14:39:34.522 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:34.523 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:34.525 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:34.526 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:34.531 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    where
        d1_0.id=?
2025-06-03 14:39:34.537 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    delete 
    from
        document_tags 
    where
        document_id=?
2025-06-03 14:39:34.539 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    delete 
    from
        documents 
    where
        id=?
2025-06-03 14:39:34.547 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 删除文档 - 18ms
2025-06-03 14:39:34.556 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:34.557 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:34.560 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:34.561 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:34.564 [http-nio-8080-exec-3] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:34.566 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:39:34.571 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:34.575 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:34.577 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 13ms
2025-06-03 14:39:35.849 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:35.850 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:35.852 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:35.853 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:35.858 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    where
        d1_0.id=?
2025-06-03 14:39:35.865 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    delete 
    from
        document_tags 
    where
        document_id=?
2025-06-03 14:39:35.867 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    delete 
    from
        documents 
    where
        id=?
2025-06-03 14:39:35.875 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 删除文档 - 18ms
2025-06-03 14:39:35.885 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:35.886 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:35.889 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:35.889 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:35.893 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:35.896 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:39:35.900 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:39:35.903 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 10ms
2025-06-03 14:39:37.490 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:37.491 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:37.494 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:37.495 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:37.498 [http-nio-8080-exec-5] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:37.502 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    where
        n1_0.id=?
2025-06-03 14:39:37.506 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    delete 
    from
        note_tags 
    where
        note_id=?
2025-06-03 14:39:37.509 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    delete 
    from
        notes 
    where
        id=?
2025-06-03 14:39:37.515 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 删除笔记 - 16ms
2025-06-03 14:39:37.531 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:37.532 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:37.534 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:37.534 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:37.538 [http-nio-8080-exec-7] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:37.541 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:39:37.545 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:39:37.548 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:37.551 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:37.552 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:37.555 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:37.557 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:37.559 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:37.561 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:37.564 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:37.566 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:37.568 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:37.570 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:37.572 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 33ms
2025-06-03 14:39:39.377 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:39.378 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:39.381 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:39.382 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:39.385 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:39.388 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    where
        n1_0.id=?
2025-06-03 14:39:39.391 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    delete 
    from
        note_tags 
    where
        note_id=?
2025-06-03 14:39:39.393 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    delete 
    from
        notes 
    where
        id=?
2025-06-03 14:39:39.399 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 删除笔记 - 14ms
2025-06-03 14:39:39.410 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:39.412 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:39.414 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:39.415 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:39.418 [http-nio-8080-exec-3] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:39.421 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:39:39.426 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:39:39.428 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:39.431 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:39.433 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:39.435 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:39.438 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:39.440 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:39.442 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:39.444 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:39.446 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:39.448 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:39.451 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 32ms
2025-06-03 14:39:40.865 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:40.867 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:40.869 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:40.870 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:40.874 [http-nio-8080-exec-4] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:40.877 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    where
        n1_0.id=?
2025-06-03 14:39:40.881 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    delete 
    from
        note_tags 
    where
        note_id=?
2025-06-03 14:39:40.883 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    delete 
    from
        notes 
    where
        id=?
2025-06-03 14:39:40.890 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 删除笔记 - 16ms
2025-06-03 14:39:40.900 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:40.901 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:40.903 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:40.904 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:40.906 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:40.910 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:39:40.914 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:39:40.916 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:40.918 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:40.921 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:40.923 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:40.925 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:40.927 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:40.930 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:40.931 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:40.933 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:40.935 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 28ms
2025-06-03 14:39:42.192 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:42.194 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:42.196 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:42.197 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:42.199 [http-nio-8080-exec-5] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:42.203 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    where
        n1_0.id=?
2025-06-03 14:39:42.206 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    delete 
    from
        note_tags 
    where
        note_id=?
2025-06-03 14:39:42.209 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    delete 
    from
        notes 
    where
        id=?
2025-06-03 14:39:42.215 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 删除笔记 - 15ms
2025-06-03 14:39:42.226 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:42.226 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:42.229 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:42.229 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:42.232 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:42.234 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:39:42.238 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:39:42.240 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:42.243 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:42.245 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:42.247 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:42.248 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:42.250 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:42.252 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:42.254 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:42.256 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 23ms
2025-06-03 14:39:43.663 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:43.665 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:43.667 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:43.667 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:43.670 [http-nio-8080-exec-8] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:43.675 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    where
        n1_0.id=?
2025-06-03 14:39:43.677 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    delete 
    from
        note_tags 
    where
        note_id=?
2025-06-03 14:39:43.679 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    delete 
    from
        notes 
    where
        id=?
2025-06-03 14:39:43.686 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 删除笔记 - 16ms
2025-06-03 14:39:43.699 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:43.700 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:43.702 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:43.703 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:43.706 [http-nio-8080-exec-3] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:43.708 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:39:43.711 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:39:43.713 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:43.716 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:43.718 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:43.719 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:43.722 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:43.723 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:43.725 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:43.728 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 22ms
2025-06-03 14:39:45.029 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:45.031 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:45.033 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:45.033 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:45.036 [http-nio-8080-exec-4] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:45.040 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    where
        n1_0.id=?
2025-06-03 14:39:45.042 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    delete 
    from
        note_tags 
    where
        note_id=?
2025-06-03 14:39:45.045 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    delete 
    from
        notes 
    where
        id=?
2025-06-03 14:39:45.051 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 删除笔记 - 14ms
2025-06-03 14:39:45.060 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:45.062 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:45.064 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:45.064 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:45.067 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:45.071 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:39:45.074 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:39:45.076 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:45.078 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:45.080 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:45.082 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:45.084 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:45.086 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:45.088 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 20ms
2025-06-03 14:39:47.478 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:47.479 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:47.481 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:47.482 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:47.486 [http-nio-8080-exec-5] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:47.489 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    where
        n1_0.id=?
2025-06-03 14:39:47.492 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    delete 
    from
        note_tags 
    where
        note_id=?
2025-06-03 14:39:47.494 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    delete 
    from
        notes 
    where
        id=?
2025-06-03 14:39:47.500 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 删除笔记 - 14ms
2025-06-03 14:39:47.511 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:47.512 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:47.514 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:47.514 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:47.517 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:47.520 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:39:47.523 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:39:47.526 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:47.527 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:47.530 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:47.532 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:47.534 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:47.537 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 20ms
2025-06-03 14:39:49.040 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:49.041 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:49.044 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:49.044 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:49.048 [http-nio-8080-exec-8] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:49.052 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    where
        n1_0.id=?
2025-06-03 14:39:49.054 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    delete 
    from
        note_tags 
    where
        note_id=?
2025-06-03 14:39:49.056 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    delete 
    from
        notes 
    where
        id=?
2025-06-03 14:39:49.064 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 删除笔记 - 14ms
2025-06-03 14:39:49.075 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:49.077 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:49.079 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:49.080 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:49.083 [http-nio-8080-exec-3] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:49.085 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:39:49.088 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:39:49.091 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:49.093 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:49.095 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:49.097 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:49.099 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 16ms
2025-06-03 14:39:50.594 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:50.595 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:50.597 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:50.598 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:50.601 [http-nio-8080-exec-4] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:50.605 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    where
        n1_0.id=?
2025-06-03 14:39:50.608 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    delete 
    from
        note_tags 
    where
        note_id=?
2025-06-03 14:39:50.610 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    delete 
    from
        notes 
    where
        id=?
2025-06-03 14:39:50.616 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 删除笔记 - 14ms
2025-06-03 14:39:50.625 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:50.625 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:50.627 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:50.628 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:50.630 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:50.633 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:39:50.636 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:39:50.638 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:50.640 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:50.642 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:50.645 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 14ms
2025-06-03 14:39:52.408 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:52.409 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:52.412 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:52.413 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:52.417 [http-nio-8080-exec-5] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:52.420 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    where
        n1_0.id=?
2025-06-03 14:39:52.423 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    delete 
    from
        note_tags 
    where
        note_id=?
2025-06-03 14:39:52.425 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    delete 
    from
        notes 
    where
        id=?
2025-06-03 14:39:52.432 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 删除笔记 - 15ms
2025-06-03 14:39:52.441 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:52.442 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:52.445 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:52.445 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:52.448 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:52.450 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:39:52.453 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:39:52.456 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:52.458 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:52.460 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 11ms
2025-06-03 14:39:53.863 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:53.864 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:53.868 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:53.868 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:53.872 [http-nio-8080-exec-8] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:53.876 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    where
        n1_0.id=?
2025-06-03 14:39:53.878 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    delete 
    from
        note_tags 
    where
        note_id=?
2025-06-03 14:39:53.881 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    delete 
    from
        notes 
    where
        id=?
2025-06-03 14:39:53.887 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 删除笔记 - 14ms
2025-06-03 14:39:53.896 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:53.897 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:53.899 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:53.899 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:53.903 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:53.905 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:39:53.908 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:39:53.910 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:39:53.912 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 9ms
2025-06-03 14:39:56.544 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:56.544 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:56.545 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:56.546 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:56.548 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:56.548 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:56.549 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:56.549 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:56.553 [http-nio-8080-exec-4] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:56.559 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    join
        note_tags t1_0 
            on n1_0.id=t1_0.note_id 
    where
        t1_0.tag_id=?
2025-06-03 14:39:56.559 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    join
        document_tags t1_0 
            on d1_0.id=t1_0.document_id 
    where
        t1_0.tag_id=?
2025-06-03 14:39:56.562 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 按标签查询文档 - 10ms
2025-06-03 14:39:56.562 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 按标签查询笔记 - 9ms
2025-06-03 14:39:57.643 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:57.643 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:39:57.644 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:57.644 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:39:57.646 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:57.647 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:39:57.647 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:57.647 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:39:57.650 [http-nio-8080-exec-5] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:39:57.652 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    join
        document_tags t1_0 
            on d1_0.id=t1_0.document_id 
    where
        t1_0.tag_id=?
2025-06-03 14:39:57.652 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    join
        note_tags t1_0 
            on n1_0.id=t1_0.note_id 
    where
        t1_0.tag_id=?
2025-06-03 14:39:57.654 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 按标签查询文档 - 4ms
2025-06-03 14:39:57.654 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 按标签查询笔记 - 4ms
2025-06-03 14:40:00.856 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:00.857 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:00.858 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:00.859 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:00.860 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:00.860 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:00.860 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:00.860 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:00.863 [http-nio-8080-exec-8] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:40:00.863 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    join
        document_tags t1_0 
            on d1_0.id=t1_0.document_id 
    where
        t1_0.tag_id=?
2025-06-03 14:40:00.865 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    join
        note_tags t1_0 
            on n1_0.id=t1_0.note_id 
    where
        t1_0.tag_id=?
2025-06-03 14:40:00.865 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 按标签查询文档 - 2ms
2025-06-03 14:40:00.867 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 按标签查询笔记 - 4ms
2025-06-03 14:40:02.428 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:02.429 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:02.431 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:02.432 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:02.437 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:02.441 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 5ms
2025-06-03 14:40:02.441 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 5ms
2025-06-03 14:40:02.464 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:02.466 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:02.469 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:02.469 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:02.473 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:02.473 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:02.473 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:02.473 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:02.474 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:02.474 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:02.474 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:02.476 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 14:40:02.476 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:02.476 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:02.476 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:02.476 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 4ms
2025-06-03 14:40:02.476 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:02.476 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:02.477 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:02.479 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:40:02.479 [http-nio-8080-exec-7] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:40:02.482 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:40:02.482 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:40:02.482 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:40:02.485 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:40:02.486 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:40:02.487 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:40:02.488 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 8ms
2025-06-03 14:40:02.490 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 10ms
2025-06-03 14:40:04.751 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:04.751 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:04.752 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:04.752 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:04.754 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:04.754 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:04.755 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:04.755 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:04.758 [http-nio-8080-exec-4] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:40:04.758 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    join
        document_tags t1_0 
            on d1_0.id=t1_0.document_id 
    where
        t1_0.tag_id=?
2025-06-03 14:40:04.760 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    join
        note_tags t1_0 
            on n1_0.id=t1_0.note_id 
    where
        t1_0.tag_id=?
2025-06-03 14:40:04.760 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 按标签查询文档 - 2ms
2025-06-03 14:40:04.762 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 按标签查询笔记 - 4ms
2025-06-03 14:40:05.727 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:05.727 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:05.728 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:05.728 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:05.731 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:05.731 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:05.731 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:05.731 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:05.734 [http-nio-8080-exec-5] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:40:05.735 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    join
        document_tags t1_0 
            on d1_0.id=t1_0.document_id 
    where
        t1_0.tag_id=?
2025-06-03 14:40:05.736 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    join
        note_tags t1_0 
            on n1_0.id=t1_0.note_id 
    where
        t1_0.tag_id=?
2025-06-03 14:40:05.737 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 按标签查询文档 - 3ms
2025-06-03 14:40:05.739 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 按标签查询笔记 - 4ms
2025-06-03 14:40:05.983 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:05.985 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:05.986 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:05.986 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:05.988 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:05.988 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:05.988 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:05.988 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:05.991 [http-nio-8080-exec-7] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:40:05.991 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    join
        document_tags t1_0 
            on d1_0.id=t1_0.document_id 
    where
        t1_0.tag_id=?
2025-06-03 14:40:05.993 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    join
        note_tags t1_0 
            on n1_0.id=t1_0.note_id 
    where
        t1_0.tag_id=?
2025-06-03 14:40:05.993 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 按标签查询文档 - 2ms
2025-06-03 14:40:05.995 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 按标签查询笔记 - 3ms
2025-06-03 14:40:06.236 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:06.237 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:06.237 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:06.237 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:06.239 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:06.239 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:06.239 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:06.240 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:06.242 [http-nio-8080-exec-9] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:40:06.243 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    join
        document_tags t1_0 
            on d1_0.id=t1_0.document_id 
    where
        t1_0.tag_id=?
2025-06-03 14:40:06.244 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    join
        note_tags t1_0 
            on n1_0.id=t1_0.note_id 
    where
        t1_0.tag_id=?
2025-06-03 14:40:06.245 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 按标签查询文档 - 3ms
2025-06-03 14:40:06.246 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 按标签查询笔记 - 3ms
2025-06-03 14:40:06.450 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:06.450 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:06.451 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:06.451 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:06.453 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:06.453 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:06.454 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:06.454 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:06.457 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:40:06.457 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    join
        document_tags t1_0 
            on d1_0.id=t1_0.document_id 
    where
        t1_0.tag_id=?
2025-06-03 14:40:06.459 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    join
        note_tags t1_0 
            on n1_0.id=t1_0.note_id 
    where
        t1_0.tag_id=?
2025-06-03 14:40:06.460 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 按标签查询文档 - 3ms
2025-06-03 14:40:06.462 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 按标签查询笔记 - 4ms
2025-06-03 14:40:06.592 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:06.592 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:06.594 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:06.594 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:06.596 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:06.596 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:06.596 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:06.596 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:06.600 [http-nio-8080-exec-7] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:40:06.600 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    join
        document_tags t1_0 
            on d1_0.id=t1_0.document_id 
    where
        t1_0.tag_id=?
2025-06-03 14:40:06.602 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    join
        note_tags t1_0 
            on n1_0.id=t1_0.note_id 
    where
        t1_0.tag_id=?
2025-06-03 14:40:06.602 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 按标签查询文档 - 3ms
2025-06-03 14:40:06.604 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 按标签查询笔记 - 4ms
2025-06-03 14:40:07.920 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:07.921 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:07.923 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:07.923 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:07.928 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:07.930 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 3ms
2025-06-03 14:40:07.931 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 4ms
2025-06-03 14:40:07.967 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:07.969 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:07.971 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:07.971 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:07.971 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:07.972 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:07.972 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:07.972 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:07.972 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:07.972 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:07.974 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:07.974 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:07.974 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:07.974 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:07.974 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:07.975 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:07.975 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:07.976 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 3ms
2025-06-03 14:40:07.977 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 4ms
2025-06-03 14:40:07.978 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:40:07.978 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:40:07.980 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:40:07.981 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:40:07.981 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:40:07.984 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:40:07.984 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:40:07.986 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 7ms
2025-06-03 14:40:07.986 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:40:07.988 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 10ms
2025-06-03 14:40:17.947 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:17.948 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:17.950 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:17.951 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:18.011 [http-nio-8080-exec-8] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:40:18.015 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:40:18.023 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        notes
        (content, created_at, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-03 14:40:18.038 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 创建笔记 - 26ms
2025-06-03 14:40:18.050 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:18.051 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:18.053 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:18.054 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:18.056 [http-nio-8080-exec-3] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:40:18.059 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:40:18.061 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:40:18.062 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:40:18.064 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:40:18.066 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 9ms
2025-06-03 14:40:21.774 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:21.775 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:21.778 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:21.778 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:21.782 [http-nio-8080-exec-9] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:40:21.785 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    where
        n1_0.id=?
2025-06-03 14:40:21.788 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    delete 
    from
        note_tags 
    where
        note_id=?
2025-06-03 14:40:21.790 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    delete 
    from
        notes 
    where
        id=?
2025-06-03 14:40:21.796 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 删除笔记 - 13ms
2025-06-03 14:40:21.805 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:40:21.806 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:40:21.809 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:40:21.809 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:40:21.812 [http-nio-8080-exec-5] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:40:21.814 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:40:21.817 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:40:21.819 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:40:21.822 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 10ms
2025-06-03 14:43:42.033 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-03 14:43:42.075 [main] INFO  com.knowledge.KnowledgeBaseApplication - Starting KnowledgeBaseApplication using Java 21.0.4 with PID 9272 (D:\KnowledgeApp\backend\target\classes started by 25565 in D:\KnowledgeApp\backend)
2025-06-03 14:43:42.076 [main] DEBUG com.knowledge.KnowledgeBaseApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-03 14:43:42.077 [main] INFO  com.knowledge.KnowledgeBaseApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-03 14:43:43.009 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-03 14:43:43.058 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 41 ms. Found 4 JPA repository interfaces.
2025-06-03 14:43:43.576 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-03 14:43:43.586 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-03 14:43:43.588 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-03 14:43:43.588 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-03 14:43:43.638 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-03 14:43:43.639 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1524 ms
2025-06-03 14:43:43.741 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-03 14:43:43.784 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-03 14:43:43.806 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-03 14:43:43.947 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-03 14:43:43.964 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-03 14:43:44.074 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@35fb3209
2025-06-03 14:43:44.076 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-03 14:43:44.114 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-03 14:43:44.766 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-03 14:43:44.843 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 14:43:45.093 [main] DEBUG com.knowledge.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-03 14:43:45.206 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-03 14:43:45.876 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-03 14:43:46.074 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4497fcd9, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3d44da41, org.springframework.security.web.context.SecurityContextHolderFilter@532860c7, org.springframework.security.web.header.HeaderWriterFilter@5e7d994c, org.springframework.web.filter.CorsFilter@524ba12b, org.springframework.security.web.authentication.logout.LogoutFilter@3c9e06d7, com.knowledge.config.JwtAuthenticationFilter@785477e5, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@62ccbd95, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@49696c41, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@685783b1, org.springframework.security.web.session.SessionManagementFilter@49d26eba, org.springframework.security.web.access.ExceptionTranslationFilter@7241872c, org.springframework.security.web.access.intercept.AuthorizationFilter@7802fc4e]
2025-06-03 14:43:46.294 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-03 14:43:46.308 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-03 14:43:46.314 [main] INFO  com.knowledge.KnowledgeBaseApplication - Started KnowledgeBaseApplication in 4.658 seconds (process running for 4.919)
2025-06-03 14:43:46.349 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-03 14:43:46.349 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-03 14:43:46.351 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-06-03 14:43:46.431 [main] INFO  com.knowledge.KnowledgeBaseApplication - MinIO存储桶初始化成功
2025-06-03 14:43:46.434 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:43:46.487 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:43:46.498 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:43:46.499 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:43:46.521 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:43:46.547 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 25ms
2025-06-03 14:43:46.557 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 36ms
2025-06-03 14:43:57.721 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:43:57.723 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:43:57.726 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:43:57.726 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:43:57.731 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:43:57.734 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 14:43:57.734 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 4ms
2025-06-03 14:43:57.988 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:43:57.990 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:43:57.993 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:43:57.993 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:43:57.996 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:43:57.996 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:43:57.996 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:43:57.997 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:43:57.997 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:43:57.997 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:43:57.997 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:43:58.000 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:43:58.000 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:43:58.000 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 14:43:58.000 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:43:58.000 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:43:58.000 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:43:58.000 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 4ms
2025-06-03 14:43:58.001 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:43:58.015 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:43:58.034 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:43:58.034 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:43:58.044 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:43:58.044 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:43:58.057 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:43:58.063 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:43:58.063 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:43:58.068 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 29ms
2025-06-03 14:43:58.068 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 29ms
2025-06-03 14:44:01.358 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:44:01.360 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:44:01.362 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:44:01.363 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:44:01.406 [http-nio-8080-exec-3] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:44:01.410 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:44:01.423 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        documents
        (created_at, description, file_path, file_size, file_type, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-03 14:44:01.431 [http-nio-8080-exec-3] INFO  com.knowledge.service.DocumentService - 空文档创建成功: 新建文档
2025-06-03 14:44:01.431 [http-nio-8080-exec-3] WARN  com.knowledge.service.DocumentService - 获取MinIO文档URL失败: 获取文档URL失败
2025-06-03 14:44:01.443 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 创建新文档 - 37ms
2025-06-03 14:44:01.465 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:44:01.467 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:44:01.470 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:44:01.470 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:44:01.474 [http-nio-8080-exec-5] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:44:01.477 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:44:01.480 [http-nio-8080-exec-5] WARN  com.knowledge.service.DocumentService - 获取MinIO文档URL失败: 获取文档URL失败
2025-06-03 14:44:01.481 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:44:01.484 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:44:01.487 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 13ms
2025-06-03 14:54:29.444 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-03 14:54:29.471 [main] INFO  com.knowledge.KnowledgeBaseApplication - Starting KnowledgeBaseApplication using Java 21.0.4 with PID 16436 (D:\KnowledgeApp\backend\target\classes started by 25565 in D:\KnowledgeApp\backend)
2025-06-03 14:54:29.472 [main] DEBUG com.knowledge.KnowledgeBaseApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-03 14:54:29.472 [main] INFO  com.knowledge.KnowledgeBaseApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-03 14:54:30.003 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-03 14:54:30.043 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 35 ms. Found 4 JPA repository interfaces.
2025-06-03 14:54:30.501 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-03 14:54:30.508 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-03 14:54:30.510 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-03 14:54:30.511 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-03 14:54:30.561 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-03 14:54:30.561 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1057 ms
2025-06-03 14:54:30.655 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-03 14:54:30.689 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-03 14:54:30.710 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-03 14:54:30.839 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-03 14:54:30.856 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-03 14:54:30.964 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5daad59a
2025-06-03 14:54:30.966 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-03 14:54:31.003 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-03 14:54:31.626 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-03 14:54:31.656 [main] DEBUG org.hibernate.SQL - 
    alter table documents 
       add column content LONGTEXT
2025-06-03 14:54:31.729 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 14:54:31.965 [main] DEBUG com.knowledge.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-03 14:54:32.077 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-03 14:54:32.633 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-03 14:54:32.840 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@67dc7d0, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@46b2e0e4, org.springframework.security.web.context.SecurityContextHolderFilter@161138c8, org.springframework.security.web.header.HeaderWriterFilter@5b12157b, org.springframework.web.filter.CorsFilter@574ffd63, org.springframework.security.web.authentication.logout.LogoutFilter@2e67df05, com.knowledge.config.JwtAuthenticationFilter@58df2864, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7075ef91, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@35c66ad, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@344ab465, org.springframework.security.web.session.SessionManagementFilter@79a1f0a1, org.springframework.security.web.access.ExceptionTranslationFilter@1ac65143, org.springframework.security.web.access.intercept.AuthorizationFilter@18a129b8]
2025-06-03 14:54:33.065 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-03 14:54:33.078 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-03 14:54:33.085 [main] INFO  com.knowledge.KnowledgeBaseApplication - Started KnowledgeBaseApplication in 3.971 seconds (process running for 4.213)
2025-06-03 14:54:33.185 [main] INFO  com.knowledge.KnowledgeBaseApplication - MinIO存储桶初始化成功
2025-06-03 14:54:37.370 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-03 14:54:37.371 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-03 14:54:37.373 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-03 14:54:37.448 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:54:37.509 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:54:37.521 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:54:37.522 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:54:37.549 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:54:37.572 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 24ms
2025-06-03 14:54:37.580 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 33ms
2025-06-03 14:54:37.639 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:54:37.642 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:54:37.645 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:54:37.645 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:54:37.650 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:54:37.650 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:54:37.650 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:54:37.651 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:54:37.652 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:54:37.652 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:54:37.652 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:54:37.654 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:54:37.654 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:54:37.654 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:54:37.654 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 14:54:37.655 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:54:37.655 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:54:37.655 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:54:37.656 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 6ms
2025-06-03 14:54:37.679 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:54:37.717 [http-nio-8080-exec-7] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:54:37.717 [http-nio-8080-exec-9] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:54:37.726 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:54:37.726 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:54:37.738 [http-nio-8080-exec-9] WARN  com.knowledge.service.DocumentService - 获取MinIO文档URL失败: 获取文档URL失败
2025-06-03 14:54:37.740 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:54:37.743 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:54:37.745 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:54:37.751 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 33ms
2025-06-03 14:54:37.759 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:54:37.764 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 46ms
2025-06-03 14:54:44.037 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:54:44.038 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:54:44.041 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:54:44.042 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:54:44.114 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:54:44.122 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:54:44.139 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        documents
        (content, created_at, description, file_path, file_size, file_type, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-06-03 14:54:44.148 [http-nio-8080-exec-1] INFO  com.knowledge.service.DocumentService - 空文档创建成功: 新建文档
2025-06-03 14:54:44.149 [http-nio-8080-exec-1] WARN  com.knowledge.service.DocumentService - 获取MinIO文档URL失败: 获取文档URL失败
2025-06-03 14:54:44.162 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 创建新文档 - 47ms
2025-06-03 14:54:44.178 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:54:44.180 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:54:44.183 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:54:44.183 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:54:44.186 [http-nio-8080-exec-3] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:54:44.190 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:54:44.193 [http-nio-8080-exec-3] WARN  com.knowledge.service.DocumentService - 获取MinIO文档URL失败: 获取文档URL失败
2025-06-03 14:54:44.194 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:54:44.197 [http-nio-8080-exec-3] WARN  com.knowledge.service.DocumentService - 获取MinIO文档URL失败: 获取文档URL失败
2025-06-03 14:54:44.197 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:54:44.201 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:54:44.204 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 18ms
2025-06-03 14:55:00.207 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:55:00.209 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:55:00.211 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:55:00.211 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:55:00.217 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    where
        d1_0.id=?
2025-06-03 14:55:00.224 [http-nio-8080-exec-2] ERROR com.knowledge.aspect.LogAspect - ✗ 文档管理 - 删除文档 - 9ms - 删除文档失败
2025-06-03 14:55:00.227 [http-nio-8080-exec-2] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: 删除文档失败] with root cause
java.lang.IllegalArgumentException: object name must not be null.
	at io.minio.BaseArgs$Builder.validateNotNull(BaseArgs.java:53)
	at io.minio.BaseArgs$Builder.validateNotEmptyString(BaseArgs.java:58)
	at io.minio.ObjectArgs$Builder.validateObjectName(ObjectArgs.java:45)
	at io.minio.ObjectArgs$Builder.object(ObjectArgs.java:61)
	at com.knowledge.service.MinioService.deleteDocument(MinioService.java:90)
	at com.knowledge.service.DocumentService.deleteDocument(DocumentService.java:349)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.knowledge.service.DocumentService$$SpringCGLIB$$0.deleteDocument(<generated>)
	at com.knowledge.controller.DocumentController.deleteDocument(DocumentController.java:156)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.knowledge.aspect.LogAspect.around(LogAspect.java:76)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:173)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.knowledge.controller.DocumentController$$SpringCGLIB$$0.deleteDocument(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.knowledge.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:48)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-03 14:55:31.048 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:55:31.050 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:55:31.052 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:55:31.053 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:55:31.057 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    where
        d1_0.id=?
2025-06-03 14:55:31.062 [http-nio-8080-exec-8] ERROR com.knowledge.aspect.LogAspect - ✗ 文档管理 - 删除文档 - 7ms - 删除文档失败
2025-06-03 14:55:31.063 [http-nio-8080-exec-8] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: 删除文档失败] with root cause
java.lang.IllegalArgumentException: object name must not be null.
	at io.minio.BaseArgs$Builder.validateNotNull(BaseArgs.java:53)
	at io.minio.BaseArgs$Builder.validateNotEmptyString(BaseArgs.java:58)
	at io.minio.ObjectArgs$Builder.validateObjectName(ObjectArgs.java:45)
	at io.minio.ObjectArgs$Builder.object(ObjectArgs.java:61)
	at com.knowledge.service.MinioService.deleteDocument(MinioService.java:90)
	at com.knowledge.service.DocumentService.deleteDocument(DocumentService.java:349)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.knowledge.service.DocumentService$$SpringCGLIB$$0.deleteDocument(<generated>)
	at com.knowledge.controller.DocumentController.deleteDocument(DocumentController.java:156)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.knowledge.aspect.LogAspect.around(LogAspect.java:76)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:173)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.knowledge.controller.DocumentController$$SpringCGLIB$$0.deleteDocument(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.knowledge.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:48)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-03 14:56:59.867 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:56:59.873 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:56:59.888 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:56:59.888 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:56:59.944 [http-nio-8080-exec-3] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: Unexpected IOException (of type java.io.FileNotFoundException): MultipartFile resource [file] cannot be resolved to absolute file path
2025-06-03 14:56:59.950 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:56:59.954 [http-nio-8080-exec-3] ERROR com.knowledge.service.DocumentService - 文档上传失败
java.lang.RuntimeException: 上传的文件为空
	at com.knowledge.service.DocumentService.uploadDocument(DocumentService.java:86)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.knowledge.service.DocumentService$$SpringCGLIB$$0.uploadDocument(<generated>)
	at com.knowledge.controller.DocumentController.uploadDocument(DocumentController.java:91)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.knowledge.aspect.LogAspect.around(LogAspect.java:76)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:173)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.knowledge.controller.DocumentController$$SpringCGLIB$$0.uploadDocument(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.knowledge.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:48)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-03 14:56:59.961 [http-nio-8080-exec-3] ERROR com.knowledge.aspect.LogAspect - ✗ 文档管理 - 上传文档 - 15ms - 文档上传失败: 上传的文件为空
2025-06-03 14:56:59.962 [http-nio-8080-exec-3] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: 文档上传失败: 上传的文件为空] with root cause
java.lang.RuntimeException: 上传的文件为空
	at com.knowledge.service.DocumentService.uploadDocument(DocumentService.java:86)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.knowledge.service.DocumentService$$SpringCGLIB$$0.uploadDocument(<generated>)
	at com.knowledge.controller.DocumentController.uploadDocument(DocumentController.java:91)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.knowledge.aspect.LogAspect.around(LogAspect.java:76)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:173)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.knowledge.controller.DocumentController$$SpringCGLIB$$0.uploadDocument(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.knowledge.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:48)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-03 14:59:16.658 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:59:16.658 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:59:16.658 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:59:16.658 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 14:59:16.659 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:59:16.659 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:59:16.659 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:59:16.659 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:59:16.664 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:59:16.664 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:59:16.664 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:59:16.664 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 14:59:16.664 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:59:16.664 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:59:16.664 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:59:16.664 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 14:59:16.669 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 14:59:16.670 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 14:59:16.672 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 14:59:16.672 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:59:16.672 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 5ms
2025-06-03 14:59:16.672 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 14:59:16.676 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 14:59:16.676 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 14:59:16.681 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 14:59:16.682 [http-nio-8080-exec-1] WARN  com.knowledge.service.DocumentService - 获取MinIO文档URL失败: 获取文档URL失败
2025-06-03 14:59:16.684 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:59:16.684 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 14:59:16.687 [http-nio-8080-exec-1] WARN  com.knowledge.service.DocumentService - 获取MinIO文档URL失败: 获取文档URL失败
2025-06-03 14:59:16.687 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 14ms
2025-06-03 14:59:16.687 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:59:16.693 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 14:59:16.696 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 24ms
2025-06-03 15:00:08.333 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-03 15:00:08.361 [main] INFO  com.knowledge.KnowledgeBaseApplication - Starting KnowledgeBaseApplication using Java 21.0.4 with PID 23160 (D:\KnowledgeApp\backend\target\classes started by 25565 in D:\KnowledgeApp\backend)
2025-06-03 15:00:08.361 [main] DEBUG com.knowledge.KnowledgeBaseApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-03 15:00:08.362 [main] INFO  com.knowledge.KnowledgeBaseApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-03 15:00:08.898 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-03 15:00:08.940 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 37 ms. Found 4 JPA repository interfaces.
2025-06-03 15:00:09.407 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-03 15:00:09.414 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-03 15:00:09.415 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-03 15:00:09.415 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-03 15:00:09.464 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-03 15:00:09.465 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1072 ms
2025-06-03 15:00:09.554 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-03 15:00:09.610 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-03 15:00:09.629 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-03 15:00:09.760 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-03 15:00:09.778 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-03 15:00:09.892 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5daad59a
2025-06-03 15:00:09.894 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-03 15:00:09.935 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-03 15:00:10.560 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-03 15:00:10.649 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 15:00:10.890 [main] DEBUG com.knowledge.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-03 15:00:10.994 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-03 15:00:11.523 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-03 15:00:11.693 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@d89b0d3, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@18a129b8, org.springframework.security.web.context.SecurityContextHolderFilter@79a1f0a1, org.springframework.security.web.header.HeaderWriterFilter@1ac65143, org.springframework.web.filter.CorsFilter@cc655a, org.springframework.security.web.authentication.logout.LogoutFilter@6846e4e8, com.knowledge.config.JwtAuthenticationFilter@5cbebfba, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5af535ff, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@161138c8, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@67dc7d0, org.springframework.security.web.session.SessionManagementFilter@750afe12, org.springframework.security.web.access.ExceptionTranslationFilter@6fa73db5, org.springframework.security.web.access.intercept.AuthorizationFilter@2627da4c]
2025-06-03 15:00:11.911 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-03 15:00:11.922 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-03 15:00:11.928 [main] INFO  com.knowledge.KnowledgeBaseApplication - Started KnowledgeBaseApplication in 3.937 seconds (process running for 4.181)
2025-06-03 15:00:12.023 [main] INFO  com.knowledge.KnowledgeBaseApplication - MinIO存储桶初始化成功
2025-06-03 15:00:17.380 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-03 15:00:17.381 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-03 15:00:17.382 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-03 15:00:17.460 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:00:17.511 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:00:17.523 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:00:17.524 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:00:17.547 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:00:17.571 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 23ms
2025-06-03 15:00:17.580 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 34ms
2025-06-03 15:00:17.610 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:00:17.612 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:00:17.615 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:00:17.616 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:00:17.621 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:00:17.621 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:00:17.621 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:00:17.622 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:00:17.623 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:00:17.623 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:00:17.623 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:00:17.626 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 6ms
2025-06-03 15:00:17.626 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:00:17.626 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:00:17.626 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:00:17.626 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:00:17.626 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 6ms
2025-06-03 15:00:17.626 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:00:17.626 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:00:17.645 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 15:00:17.661 [http-nio-8080-exec-3] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:00:17.661 [http-nio-8080-exec-9] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:00:17.672 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:00:17.672 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 15:00:17.684 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 15:00:17.686 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:00:17.688 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 15:00:17.690 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:00:17.693 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 31ms
2025-06-03 15:00:17.695 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:00:17.699 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 37ms
2025-06-03 15:00:20.594 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:00:20.595 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:00:20.598 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:00:20.598 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:00:20.607 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:00:20.616 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    where
        d1_0.id=?
2025-06-03 15:00:20.619 [http-nio-8080-exec-1] INFO  com.knowledge.service.DocumentService - 空文档删除，无需删除MinIO文件: 新建文档
2025-06-03 15:00:20.626 [http-nio-8080-exec-1] INFO  com.knowledge.service.DocumentService - 文档删除成功: 新建文档
2025-06-03 15:00:20.636 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    delete 
    from
        document_tags 
    where
        document_id=?
2025-06-03 15:00:20.645 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    delete 
    from
        documents 
    where
        id=?
2025-06-03 15:00:20.658 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 删除文档 - 49ms
2025-06-03 15:00:20.669 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:00:20.671 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:00:20.674 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:00:20.675 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:00:20.678 [http-nio-8080-exec-5] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:00:20.681 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:00:20.685 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:00:20.688 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:00:20.691 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 13ms
2025-06-03 15:00:22.568 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:00:22.569 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:00:22.572 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:00:22.573 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:00:22.576 [http-nio-8080-exec-7] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:00:22.580 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    where
        d1_0.id=?
2025-06-03 15:00:22.583 [http-nio-8080-exec-7] INFO  com.knowledge.service.DocumentService - 空文档删除，无需删除MinIO文件: 新建文档
2025-06-03 15:00:22.584 [http-nio-8080-exec-7] INFO  com.knowledge.service.DocumentService - 文档删除成功: 新建文档
2025-06-03 15:00:22.584 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    delete 
    from
        document_tags 
    where
        document_id=?
2025-06-03 15:00:22.587 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    delete 
    from
        documents 
    where
        id=?
2025-06-03 15:00:22.594 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 删除文档 - 17ms
2025-06-03 15:00:22.604 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:00:22.605 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:00:22.608 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:00:22.608 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:00:22.611 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:00:22.615 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:00:22.619 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:00:22.622 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 10ms
2025-06-03 15:03:46.336 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:03:46.338 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:03:46.340 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:03:46.341 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:03:46.345 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:03:46.349 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 15:03:46.349 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 5ms
2025-06-03 15:03:46.607 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:03:46.610 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:03:46.613 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:03:46.613 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:03:46.616 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:03:46.617 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:03:46.617 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:03:46.618 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:03:46.618 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:03:46.618 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:03:46.618 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:03:46.621 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:03:46.621 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:03:46.621 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 15:03:46.621 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:03:46.621 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:03:46.621 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:03:46.622 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:03:46.622 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 5ms
2025-06-03 15:03:46.625 [http-nio-8080-exec-8] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:03:46.625 [http-nio-8080-exec-4] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:03:46.628 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 15:03:46.628 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 15:03:46.628 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:03:46.631 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 15:03:46.632 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:03:46.634 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 15:03:46.635 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 9ms
2025-06-03 15:03:46.635 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 9ms
2025-06-03 15:04:23.035 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-03 15:04:23.063 [main] INFO  com.knowledge.KnowledgeBaseApplication - Starting KnowledgeBaseApplication using Java 21.0.4 with PID 23600 (D:\KnowledgeApp\backend\target\classes started by 25565 in D:\KnowledgeApp\backend)
2025-06-03 15:04:23.063 [main] DEBUG com.knowledge.KnowledgeBaseApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-03 15:04:23.064 [main] INFO  com.knowledge.KnowledgeBaseApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-03 15:04:23.606 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-03 15:04:23.645 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 33 ms. Found 4 JPA repository interfaces.
2025-06-03 15:04:24.116 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-03 15:04:24.124 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-03 15:04:24.125 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-03 15:04:24.126 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-03 15:04:24.174 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-03 15:04:24.175 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1082 ms
2025-06-03 15:04:24.268 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-03 15:04:24.320 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-03 15:04:24.342 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-03 15:04:24.486 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-03 15:04:24.502 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-03 15:04:24.616 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@56f2c9e8
2025-06-03 15:04:24.617 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-03 15:04:24.653 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-03 15:04:25.299 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-03 15:04:25.372 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 15:04:25.617 [main] DEBUG com.knowledge.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-03 15:04:25.754 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-03 15:04:26.316 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-03 15:04:26.517 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@18a129b8, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@cc655a, org.springframework.security.web.context.SecurityContextHolderFilter@5bf97be9, org.springframework.security.web.header.HeaderWriterFilter@4cda8d3b, org.springframework.web.filter.CorsFilter@67dc7d0, org.springframework.security.web.authentication.logout.LogoutFilter@41861964, com.knowledge.config.JwtAuthenticationFilter@5f26fc4d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@161138c8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@60c3f653, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@46b2e0e4, org.springframework.security.web.session.SessionManagementFilter@4788c0a1, org.springframework.security.web.access.ExceptionTranslationFilter@7ce87db5, org.springframework.security.web.access.intercept.AuthorizationFilter@7f9f3516]
2025-06-03 15:04:26.736 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-03 15:04:26.749 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-03 15:04:26.755 [main] INFO  com.knowledge.KnowledgeBaseApplication - Started KnowledgeBaseApplication in 4.063 seconds (process running for 4.318)
2025-06-03 15:04:26.863 [main] INFO  com.knowledge.KnowledgeBaseApplication - MinIO存储桶初始化成功
2025-06-03 15:04:28.546 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-03 15:04:28.546 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-03 15:04:28.549 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-03 15:04:28.643 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:04:28.695 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:04:28.706 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:04:28.707 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:04:28.734 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:04:28.757 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 24ms
2025-06-03 15:04:28.764 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 32ms
2025-06-03 15:04:28.787 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:04:28.789 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:04:28.792 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:04:28.793 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:04:28.795 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:04:28.796 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:04:28.796 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:04:28.797 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:04:28.797 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:04:28.797 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:04:28.798 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:04:28.799 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:04:28.799 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:04:28.800 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:04:28.800 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:04:28.800 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 3ms
2025-06-03 15:04:28.800 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:04:28.800 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:04:28.800 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 3ms
2025-06-03 15:04:28.815 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 15:04:28.827 [http-nio-8080-exec-3] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:04:28.827 [http-nio-8080-exec-9] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:04:28.832 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 15:04:28.832 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:04:28.841 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 15:04:28.846 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:04:28.846 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 15:04:28.850 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 23ms
2025-06-03 15:04:28.850 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 22ms
2025-06-03 15:05:02.156 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:05:02.157 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:05:02.160 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:05:02.160 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:05:02.201 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:05:02.207 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 15:05:02.219 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        documents
        (content, created_at, description, file_path, file_size, file_type, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-06-03 15:05:02.227 [http-nio-8080-exec-1] INFO  com.knowledge.service.DocumentService - 空文档创建成功: 新建文档
2025-06-03 15:05:02.239 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 创建新文档 - 37ms
2025-06-03 15:05:02.259 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:05:02.261 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:05:02.263 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:05:02.264 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:05:02.267 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:05:02.270 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:05:02.273 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:05:02.276 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:05:02.278 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 11ms
2025-06-03 15:09:51.097 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-03 15:09:51.123 [main] INFO  com.knowledge.KnowledgeBaseApplication - Starting KnowledgeBaseApplication using Java 21.0.4 with PID 8400 (D:\KnowledgeApp\backend\target\classes started by 25565 in D:\KnowledgeApp\backend)
2025-06-03 15:09:51.124 [main] DEBUG com.knowledge.KnowledgeBaseApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-03 15:09:51.125 [main] INFO  com.knowledge.KnowledgeBaseApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-03 15:09:51.675 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-03 15:09:51.715 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 36 ms. Found 4 JPA repository interfaces.
2025-06-03 15:09:52.167 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-03 15:09:52.174 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-03 15:09:52.177 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-03 15:09:52.178 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-03 15:09:52.226 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-03 15:09:52.227 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1070 ms
2025-06-03 15:09:52.336 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-03 15:09:52.379 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-03 15:09:52.402 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-03 15:09:52.537 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-03 15:09:52.555 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-03 15:09:52.666 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@70439c3
2025-06-03 15:09:52.668 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-03 15:09:52.703 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-03 15:09:53.330 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-03 15:09:53.405 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 15:09:53.645 [main] DEBUG com.knowledge.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-03 15:09:53.744 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-03 15:09:54.281 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-03 15:09:54.443 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@71590f85, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6565f3, org.springframework.security.web.context.SecurityContextHolderFilter@73e054c0, org.springframework.security.web.header.HeaderWriterFilter@7bbd133c, org.springframework.web.filter.CorsFilter@891f18f, org.springframework.security.web.authentication.logout.LogoutFilter@685783b1, com.knowledge.config.JwtAuthenticationFilter@c6653e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@73760b13, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6b5df313, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@189e986f, org.springframework.security.web.session.SessionManagementFilter@c7485d2, org.springframework.security.web.access.ExceptionTranslationFilter@62ccbd95, org.springframework.security.web.access.intercept.AuthorizationFilter@4db8b888]
2025-06-03 15:09:54.653 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-03 15:09:54.665 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-03 15:09:54.671 [main] INFO  com.knowledge.KnowledgeBaseApplication - Started KnowledgeBaseApplication in 3.966 seconds (process running for 4.21)
2025-06-03 15:09:54.759 [main] INFO  com.knowledge.KnowledgeBaseApplication - MinIO存储桶初始化成功
2025-06-03 15:10:01.545 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-03 15:10:01.545 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-03 15:10:01.546 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-06-03 15:10:01.621 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:10:01.685 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:10:01.696 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:10:01.698 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:10:01.722 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:10:01.745 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 23ms
2025-06-03 15:10:01.753 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 32ms
2025-06-03 15:10:01.869 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:10:01.871 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:10:01.874 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:10:01.875 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:10:01.878 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:10:01.878 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:10:01.878 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:10:01.879 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:10:01.879 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:10:01.879 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:10:01.879 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:10:01.882 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:10:01.882 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:10:01.882 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:10:01.882 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 15:10:01.882 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:10:01.882 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:10:01.882 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:10:01.882 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 4ms
2025-06-03 15:10:01.898 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 15:10:01.932 [http-nio-8080-exec-8] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:10:01.932 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:10:01.939 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 15:10:01.939 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:10:01.948 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 15:10:01.949 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:10:01.952 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 15:10:01.956 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 23ms
2025-06-03 15:10:01.957 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:10:01.962 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 30ms
2025-06-03 15:10:28.433 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:10:28.434 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:10:28.438 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:10:28.438 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:10:28.498 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:10:28.506 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 15:10:28.523 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        documents
        (content, created_at, description, file_path, file_size, file_type, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-06-03 15:10:28.534 [http-nio-8080-exec-1] INFO  com.knowledge.service.DocumentService - 空文档创建成功: 新建文档
2025-06-03 15:10:28.545 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 创建新文档 - 46ms
2025-06-03 15:10:28.561 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:10:28.563 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:10:28.565 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:10:28.566 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:10:28.569 [http-nio-8080-exec-5] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:10:28.572 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:10:28.575 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:10:28.577 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:10:28.581 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:10:28.583 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 14ms
2025-06-03 15:10:31.410 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:10:31.412 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:10:31.414 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:10:31.414 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:10:31.419 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:10:31.423 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    where
        d1_0.id=?
2025-06-03 15:10:31.426 [http-nio-8080-exec-6] INFO  com.knowledge.service.DocumentService - 空文档删除，无需删除MinIO文件: 新建文档
2025-06-03 15:10:31.430 [http-nio-8080-exec-6] INFO  com.knowledge.service.DocumentService - 文档删除成功: 新建文档
2025-06-03 15:10:31.431 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    delete 
    from
        document_tags 
    where
        document_id=?
2025-06-03 15:10:31.436 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    delete 
    from
        documents 
    where
        id=?
2025-06-03 15:10:31.445 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 删除文档 - 26ms
2025-06-03 15:10:31.455 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:10:31.456 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:10:31.458 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:10:31.459 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:10:31.463 [http-nio-8080-exec-4] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:10:31.465 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:10:31.469 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:10:31.472 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:10:31.475 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 12ms
2025-06-03 15:10:33.002 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:10:33.003 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:10:33.006 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:10:33.007 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:10:33.010 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:10:33.015 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    where
        d1_0.id=?
2025-06-03 15:10:33.018 [http-nio-8080-exec-10] INFO  com.knowledge.service.DocumentService - 空文档删除，无需删除MinIO文件: 新建文档
2025-06-03 15:10:33.019 [http-nio-8080-exec-10] INFO  com.knowledge.service.DocumentService - 文档删除成功: 新建文档
2025-06-03 15:10:33.019 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    delete 
    from
        document_tags 
    where
        document_id=?
2025-06-03 15:10:33.021 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    delete 
    from
        documents 
    where
        id=?
2025-06-03 15:10:33.028 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 删除文档 - 17ms
2025-06-03 15:10:33.038 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:10:33.040 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:10:33.043 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:10:33.044 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:10:33.047 [http-nio-8080-exec-8] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:10:33.051 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:10:33.056 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:10:33.059 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 10ms
2025-06-03 15:14:38.642 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:14:38.642 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:14:38.642 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:14:38.642 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:14:38.644 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:14:38.644 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:14:38.644 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:14:38.644 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:14:38.646 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:14:38.646 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:14:38.646 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:14:38.646 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:14:38.646 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:14:38.646 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:14:38.646 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:14:38.646 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:14:38.649 [http-nio-8080-exec-8] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:14:38.649 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:14:38.650 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:14:38.651 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 15:14:38.652 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:14:38.652 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 15:14:38.652 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 3ms
2025-06-03 15:14:38.652 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 3ms
2025-06-03 15:14:38.654 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 15:14:38.656 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:14:38.657 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 15:14:38.657 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 7ms
2025-06-03 15:14:38.659 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 9ms
2025-06-03 15:19:24.362 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-03 15:19:24.392 [main] INFO  com.knowledge.KnowledgeBaseApplication - Starting KnowledgeBaseApplication using Java 21.0.4 with PID 23564 (D:\KnowledgeApp\backend\target\classes started by 25565 in D:\KnowledgeApp\backend)
2025-06-03 15:19:24.392 [main] DEBUG com.knowledge.KnowledgeBaseApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-03 15:19:24.393 [main] INFO  com.knowledge.KnowledgeBaseApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-03 15:19:24.936 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-03 15:19:24.976 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 35 ms. Found 4 JPA repository interfaces.
2025-06-03 15:19:25.429 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-03 15:19:25.435 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-03 15:19:25.437 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-03 15:19:25.438 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-03 15:19:25.488 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-03 15:19:25.489 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1067 ms
2025-06-03 15:19:25.587 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-03 15:19:25.624 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-03 15:19:25.643 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-03 15:19:25.773 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-03 15:19:25.790 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-03 15:19:25.905 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5256fbc
2025-06-03 15:19:25.906 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-03 15:19:25.945 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-03 15:19:26.567 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-03 15:19:26.651 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-03 15:19:26.904 [main] DEBUG com.knowledge.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-03 15:19:27.002 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-03 15:19:27.524 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-03 15:19:27.690 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@d89b0d3, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@18a129b8, org.springframework.security.web.context.SecurityContextHolderFilter@79a1f0a1, org.springframework.security.web.header.HeaderWriterFilter@1ac65143, org.springframework.web.filter.CorsFilter@cc655a, org.springframework.security.web.authentication.logout.LogoutFilter@6846e4e8, com.knowledge.config.JwtAuthenticationFilter@58df2864, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5af535ff, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@161138c8, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@67dc7d0, org.springframework.security.web.session.SessionManagementFilter@750afe12, org.springframework.security.web.access.ExceptionTranslationFilter@6fa73db5, org.springframework.security.web.access.intercept.AuthorizationFilter@2627da4c]
2025-06-03 15:19:27.897 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-03 15:19:27.909 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-03 15:19:27.916 [main] INFO  com.knowledge.KnowledgeBaseApplication - Started KnowledgeBaseApplication in 3.877 seconds (process running for 4.124)
2025-06-03 15:19:28.016 [main] INFO  com.knowledge.KnowledgeBaseApplication - MinIO存储桶初始化成功
2025-06-03 15:19:33.353 [http-nio-8080-exec-3] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-03 15:19:33.354 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-03 15:19:33.355 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-03 15:19:33.428 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:19:33.485 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:33.498 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:19:33.499 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:19:33.525 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:33.548 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 24ms
2025-06-03 15:19:33.556 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 32ms
2025-06-03 15:19:33.676 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:19:33.678 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:33.682 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:19:33.682 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:19:33.686 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:19:33.686 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:19:33.686 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:19:33.687 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:33.688 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:33.687 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:33.688 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:33.690 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:19:33.691 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 15:19:33.691 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:19:33.691 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:19:33.691 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:19:33.691 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:19:33.691 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:19:33.691 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 4ms
2025-06-03 15:19:33.709 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 15:19:33.743 [http-nio-8080-exec-8] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:19:33.743 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:19:33.751 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:19:33.751 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 15:19:33.762 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 15:19:33.768 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:19:33.768 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 15:19:33.772 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 28ms
2025-06-03 15:19:33.773 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 28ms
2025-06-03 15:19:34.216 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:19:34.218 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:34.221 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:19:34.221 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:19:34.227 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:34.230 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 4ms
2025-06-03 15:19:34.231 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 5ms
2025-06-03 15:19:34.264 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:19:34.264 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:19:34.264 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:19:34.265 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:19:34.266 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:34.266 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:34.266 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:34.267 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:34.269 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:19:34.269 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:19:34.269 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:19:34.269 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:19:34.270 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:19:34.270 [http-nio-8080-exec-4] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:19:34.270 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:19:34.270 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:19:34.273 [http-nio-8080-exec-4] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:19:34.273 [http-nio-8080-exec-9] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:19:34.274 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:34.276 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.color,
        t1_0.name 
    from
        tags t1_0
2025-06-03 15:19:34.276 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 15:19:34.277 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:19:34.278 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 查找用户 - 5ms
2025-06-03 15:19:34.278 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 用户管理 - 获取用户信息 - 5ms
2025-06-03 15:19:34.280 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 15:19:34.281 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:19:34.282 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 15:19:34.283 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 8ms
2025-06-03 15:19:34.284 [http-nio-8080-exec-4] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 10ms
2025-06-03 15:19:37.799 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:19:37.801 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:37.803 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:19:37.804 [http-nio-8080-exec-5] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:19:37.861 [http-nio-8080-exec-5] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:19:37.868 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 15:19:37.881 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        documents
        (content, created_at, description, file_path, file_size, file_type, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-06-03 15:19:37.890 [http-nio-8080-exec-5] INFO  com.knowledge.service.DocumentService - 空文档创建成功: 新建文档
2025-06-03 15:19:37.902 [http-nio-8080-exec-5] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 创建新文档 - 40ms
2025-06-03 15:19:37.927 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:19:37.929 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:37.931 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:19:37.932 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:19:37.936 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:19:37.940 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:19:37.944 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:19:37.948 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:19:37.951 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 14ms
2025-06-03 15:19:46.361 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:19:46.363 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:46.366 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:19:46.366 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:19:46.372 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    where
        d1_0.id=?
2025-06-03 15:19:46.379 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:19:46.382 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档详情 - 12ms
2025-06-03 15:19:54.324 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:19:54.325 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:54.328 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:19:54.328 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:19:54.336 [http-nio-8080-exec-3] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[2]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:19:54.340 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    where
        d1_0.id=?
2025-06-03 15:19:54.344 [http-nio-8080-exec-3] INFO  com.knowledge.service.DocumentService - 文档内容更新成功: 技术美术学习规划.md
2025-06-03 15:19:54.346 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:19:54.353 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    update
        documents 
    set
        content=?,
        created_at=?,
        description=?,
        file_path=?,
        file_size=?,
        file_type=?,
        title=?,
        user_id=? 
    where
        id=?
2025-06-03 15:19:54.367 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 更新文档内容 - 31ms
2025-06-03 15:19:54.384 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:19:54.385 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:54.387 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:19:54.387 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:19:54.390 [http-nio-8080-exec-9] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:19:54.393 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:19:54.397 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:19:54.400 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:19:54.403 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 13ms
2025-06-03 15:19:59.865 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:19:59.866 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:59.868 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:19:59.869 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:19:59.874 [http-nio-8080-exec-2] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[2]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:19:59.878 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    where
        d1_0.id=?
2025-06-03 15:19:59.882 [http-nio-8080-exec-2] INFO  com.knowledge.service.DocumentService - 文档内容更新成功: 技术美术学习规划.md
2025-06-03 15:19:59.884 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:19:59.887 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    update
        documents 
    set
        content=?,
        created_at=?,
        description=?,
        file_path=?,
        file_size=?,
        file_type=?,
        title=?,
        user_id=? 
    where
        id=?
2025-06-03 15:19:59.899 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 更新文档内容 - 25ms
2025-06-03 15:19:59.915 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:19:59.916 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:19:59.918 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:19:59.919 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:19:59.923 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:19:59.926 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:19:59.931 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:19:59.935 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:19:59.937 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 13ms
2025-06-03 15:20:12.468 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:20:12.469 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:20:12.472 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:20:12.472 [http-nio-8080-exec-8] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:20:12.477 [http-nio-8080-exec-8] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[2]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:20:12.481 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    where
        d1_0.id=?
2025-06-03 15:20:12.484 [http-nio-8080-exec-8] INFO  com.knowledge.service.DocumentService - 文档内容更新成功: 技术美术学习规划.md
2025-06-03 15:20:12.486 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:20:12.489 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    update
        documents 
    set
        content=?,
        created_at=?,
        description=?,
        file_path=?,
        file_size=?,
        file_type=?,
        title=?,
        user_id=? 
    where
        id=?
2025-06-03 15:20:12.507 [http-nio-8080-exec-8] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 更新文档内容 - 30ms
2025-06-03 15:20:12.520 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:20:12.521 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:20:12.524 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:20:12.524 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:20:12.527 [http-nio-8080-exec-3] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:20:12.530 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:20:12.534 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:20:12.537 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:20:12.540 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 12ms
2025-06-03 15:20:18.696 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:20:18.697 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:20:18.700 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:20:18.700 [http-nio-8080-exec-9] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:20:18.703 [http-nio-8080-exec-9] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:20:18.708 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    where
        d1_0.id=?
2025-06-03 15:20:18.719 [http-nio-8080-exec-9] INFO  com.knowledge.service.DocumentService - MinIO文件删除成功: 1/1748930792520_技术美术学习规划.md
2025-06-03 15:20:18.724 [http-nio-8080-exec-9] INFO  com.knowledge.service.DocumentService - 文档删除成功: 技术美术学习规划.md
2025-06-03 15:20:18.726 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    delete 
    from
        document_tags 
    where
        document_id=?
2025-06-03 15:20:18.730 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    delete 
    from
        documents 
    where
        id=?
2025-06-03 15:20:18.739 [http-nio-8080-exec-9] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 删除文档 - 35ms
2025-06-03 15:20:18.754 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:20:18.756 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:20:18.758 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:20:18.758 [http-nio-8080-exec-2] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:20:18.762 [http-nio-8080-exec-2] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:20:18.765 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:20:18.768 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.document_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        document_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.document_id=?
2025-06-03 15:20:18.771 [http-nio-8080-exec-2] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 8ms
2025-06-03 15:20:22.490 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:20:22.491 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:20:22.494 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:20:22.494 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:20:22.497 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:20:22.501 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    where
        d1_0.id=?
2025-06-03 15:20:22.503 [http-nio-8080-exec-6] INFO  com.knowledge.service.DocumentService - 空文档删除，无需删除MinIO文件: 新建文档
2025-06-03 15:20:22.504 [http-nio-8080-exec-6] INFO  com.knowledge.service.DocumentService - 文档删除成功: 新建文档
2025-06-03 15:20:22.505 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    delete 
    from
        document_tags 
    where
        document_id=?
2025-06-03 15:20:22.507 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    delete 
    from
        documents 
    where
        id=?
2025-06-03 15:20:22.515 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 删除文档 - 17ms
2025-06-03 15:20:22.526 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:20:22.528 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:20:22.531 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:20:22.531 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:20:22.535 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:20:22.539 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.content,
        d1_0.created_at,
        d1_0.description,
        d1_0.file_path,
        d1_0.file_size,
        d1_0.file_type,
        d1_0.title,
        d1_0.user_id 
    from
        documents d1_0 
    left join
        users u1_0 
            on u1_0.id=d1_0.user_id 
    where
        u1_0.id=? 
    order by
        d1_0.created_at desc
2025-06-03 15:20:22.542 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 文档管理 - 获取文档列表 - 6ms
2025-06-03 15:20:24.416 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:20:24.418 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:20:24.421 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:20:24.421 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:20:24.425 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:20:24.428 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    where
        n1_0.id=?
2025-06-03 15:20:24.432 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    delete 
    from
        note_tags 
    where
        note_id=?
2025-06-03 15:20:24.434 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    delete 
    from
        notes 
    where
        id=?
2025-06-03 15:20:24.443 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 删除笔记 - 18ms
2025-06-03 15:20:24.457 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:20:24.458 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:20:24.460 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:20:24.460 [http-nio-8080-exec-7] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:20:24.464 [http-nio-8080-exec-7] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:20:24.467 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 15:20:24.470 [http-nio-8080-exec-7] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 6ms
2025-06-03 15:20:36.385 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:20:36.387 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:20:36.390 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:20:36.390 [http-nio-8080-exec-6] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:20:36.402 [http-nio-8080-exec-6] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:20:36.406 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 15:20:36.409 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        notes
        (content, created_at, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-03 15:20:36.419 [http-nio-8080-exec-6] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 创建笔记 - 17ms
2025-06-03 15:20:36.430 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:20:36.431 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:20:36.434 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:20:36.435 [http-nio-8080-exec-10] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:20:36.438 [http-nio-8080-exec-10] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:20:36.441 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 15:20:36.444 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-03 15:20:36.447 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.note_id,
        t1_1.id,
        t1_1.color,
        t1_1.name 
    from
        note_tags t1_0 
    join
        tags t1_1 
            on t1_1.id=t1_0.tag_id 
    where
        t1_0.note_id=?
2025-06-03 15:20:36.450 [http-nio-8080-exec-10] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 11ms
2025-06-03 15:20:39.350 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:20:39.351 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:20:39.353 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:20:39.354 [http-nio-8080-exec-1] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:20:39.357 [http-nio-8080-exec-1] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[1]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:20:39.360 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    where
        n1_0.id=?
2025-06-03 15:20:39.364 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    delete 
    from
        note_tags 
    where
        note_id=?
2025-06-03 15:20:39.366 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    delete 
    from
        notes 
    where
        id=?
2025-06-03 15:20:39.372 [http-nio-8080-exec-1] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 删除笔记 - 14ms
2025-06-03 15:20:39.383 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 尝试加载用户: root
2025-06-03 15:20:39.385 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-03 15:20:39.387 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - 用户找到: root, 密码长度: 60
2025-06-03 15:20:39.388 [http-nio-8080-exec-3] DEBUG com.knowledge.service.UserDetailsServiceImpl - UserDetails创建成功，用户名: root
2025-06-03 15:20:39.391 [http-nio-8080-exec-3] WARN  com.knowledge.aspect.LogAspect - 格式化请求参数失败: getInputStream() has already been called for this request (through reference chain: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper[0]->org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper["request"]->org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest["request"]->org.springframework.security.web.firewall.StrictHttpFirewall$StrictFirewalledRequest["request"]->org.apache.catalina.connector.RequestFacade["reader"])
2025-06-03 15:20:39.393 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.title,
        n1_0.updated_at,
        n1_0.user_id 
    from
        notes n1_0 
    left join
        users u1_0 
            on u1_0.id=n1_0.user_id 
    where
        u1_0.id=? 
    order by
        n1_0.updated_at desc
2025-06-03 15:20:39.396 [http-nio-8080-exec-3] INFO  com.knowledge.aspect.LogAspect - ✓ 笔记管理 - 获取笔记列表 - 4ms
